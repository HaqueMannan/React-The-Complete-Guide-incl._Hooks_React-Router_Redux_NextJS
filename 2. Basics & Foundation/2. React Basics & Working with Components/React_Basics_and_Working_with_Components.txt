React Basics & Working with Components - Summary:
1. What are Components?
2. How are Components Built?
3. Creating a New React Project
4. Analysing a Standard React Project
5. Introducing JSX
6. Building a Custom Component
7. Writing a more Complex JSX Code

------------------------------------------------------------------------------------
1. What are Components?:
------------------------------------------------------------------------------------
   > HTML, CSS and JavaScript are web technologies for building User Interfaces.
   > React is a JavaScript library for building User Interfaces (UI).
   > React makes building complex interactive and reactive UI simpler.
   > React embraces a concept called "Components".
   > React is all above components because all UI at the end of the day are made up of components.
   > Components are a combination of HTML for structure, CSS for styling and possibly JavScript for logic.
   > Components have a trait of being reusable.
   > This creates individual building blocks which can be combined together to build a UI.
   > React embraces Components because of reusability (DRY principal) and separation of concerns (functions Single-Responsibility principle). Both concepts are important in programming in general.

------------------------------------------------------------------------------------
2. How are Components Built?:
------------------------------------------------------------------------------------
   > When you work with React and build components, you are simply combining HTML, CSS and JavaScript. You then combine all these components together to build the entire UI.
   > The CSS is the least important aspect when building components in React.
   > Vanilla JavaScript requires you to tell it where a certain HTML element should be created and inserted at a pacific place on the UI (if you were creating HTML using vanilla JavaScript).
   > React uses a 'Declarative Approach' for building components. This means with React, you would define the desired end state i.e. target state(s) and let React figure out the actual JavaScript DOM instructions under the hood.
   > Therefore, you can say that with React, you build your own custom HMTL Elements which you combine together to build a UI.

------------------------------------------------------------------------------------
3. Creating a New React Project:
------------------------------------------------------------------------------------
   > Create-React-App is a console tool that allows you to quickly generate a boiler plate react project (https://create-react-app.dev/).
   > Further documentation resource: https://reactjs.org/docs/create-a-new-react-app.html
   > This will create pre-configured folders, basic react code files and most importantly a bunch of configuration files to help build the react application for production as well as provide a local development environment.
   > To execute the Create-React-App tool, you will require Node.js to be installed on your machine which is a runtime for JavaScript which will allow you to run JavaScript code.
   > Node.js comes bundled with the Node Package Manager (NPM) which allows you to install external packages.
   > https://nodejs.org/en/
   > Within the terminal, navigate to the desired path you wish to create a new React Project using the 'cd' (change directory) command.
   > Execute the following commands to create the new React Project within the current directory path:

   Terminal Commands:
      $: npx create-react-app [app-name]
      $: cd [app-name]
      $: npm start

   > Replace [app-name] with the name of your React application e.g. 'npx create-react-app my-app'
   > Important Note: NPM naming restrictions restricts you from using capital letters within the app name, thus, you cannot use camelCase naming of the App file.
   > Your new project files will be created in the destination. The 'npm start' command will run your React app in your local development environment i.e. localhost:3000 (you must be in the directory before you run the command).
   > You are now ready to start editing the base dummy code and creating your React Application.
   > To stop the React local web server from running, hold down the control key and press the c button on your keyboard in the terminal that is running the server.

------------------------------------------------------------------------------------
4. Analysing a Standard React Project:
------------------------------------------------------------------------------------
   > The src folder within your React Project is the main source folder where you would write your React code.
   > React code is just JavaScript code, but you would use special syntax code introduced by React.
   > The index.js file is the first code file that will be executed whenever the root page is loaded.
   > Important Note: the index.js code will actually be a transformed/optimised version of the code which is generated behind the scenes. For example the below codes are not valid JavaScript syntax but will be converted to be valid JavaScript code:
      "import './index.css';" and 
      "ReactDOM.render(<React.StrictMode><App /></React.StrictMode>, document.getElementById('root'));"
   > This allows you to write code in a nice and easily readable developer friendly way but have transformed valid code at the end of the day that can run in the browser.

   > The public/index.html file is the single HTML file that is loaded in the browser. React creates a so-called single page application typically. This means it creates one single HTML file that is delivered and rendered to the browser and the finished React (JavaScript) code that is what we actually see on the screen that manipulates the DOM.
   > The <div id="root"></div> is the single HTML element within the file. This element has the id of 'root'. It is this element that is selected by the index.js ReactDOM.render() snippet i.e. 'document.getElementById('root')'.
   > The <noscript> HTML element is used to load the React JavaScript code into the HTML.

   > The <App /> is the JavaScript file (i.e. 'import App from './App';') that we would have imported into the index.js file.
   > Using the ReactDOM.render() function from the 'react-dom' library we are injecting the <App /> (i.e. the App.js JavaScript code) into the <div id="root"> element which ultimately gets rendered to the screen.
   > This is not regular JavaScript syntax but something called JSX syntax which we will revisit in 5. Introducing JSX.
   > The <App /> is the first React Component which we render inside of the 'root' <div> element.

   > The App.js is the file that holds a function called App() which is then exported. This allows you to use the App function in the index.js file.
   > The App() function returns something which is a HTML code inside of a JavaScript file. This is not a valid JavaScript code; however, it works because of the JSX feature which is a special syntax invented and introduced by the React team. This syntax works due to the overall project setup and the behind the scenes transformations that convert the code into valid JavaScript code.

------------------------------------------------------------------------------------
5. Introducing JSX:
------------------------------------------------------------------------------------
   > JSX stands for JavaScript XML because you could say HTML in the end is XML.
   > There are transformation steps working behind the scenes which transforms the JSX JavaScript code to a more browser friendly code before everything is actually served to the browser.
   > You can view the transformed code by opening the Developer tool within your browser for the React App and within the Sources tab you can see all the scripts and files downloaded by the browser to render the page on the screen.
   > The static/js folder will hold the transformed JavaScript code which looks like some cryptic JavaScript code which you have not written in your project code which is a more simple and developer friendly code.
   > The code in these files are not only your code but also the entire React Package code.

------------------------------------------------------------------------------------
6. Building a Custom Component:
------------------------------------------------------------------------------------
   > It is considered best practice to place new components into new files. To organise the source code, you can create a new 'src/components' folder which will hold all the components source files.
   > The App.js will not move into the components directory because this will act as a special kind of component (not regarding its code but rather it's role within the application).
   > The App.js will be the root component which will be the main component rendered in the main index.js file.
   > All other components will either be nested inside of App.js or other Component files which will eventually be nested into the App.js file.
   > With React you are building a "Component Tree", for example:

   Component Tree Example:
                  <App />
            _________|_________
            |                 |
         <Header />        <Tasks />
                              |
                  ____________|____________
                  |           |           |
               <Task />    <Task />    <Task />

   > Big Applications can result in large Component Trees where only the topmost (i.e. <App />) component is rendered into the single HTML page with the help of the ReactDOM.render() function.
   > It is a common naming convention to name your component JavaScript files using PascalCase (i.e. the first letter of each word is capitalised and the first character must always be capitalised).
   > The name of the component should tell the developer what kind of logic and HTML code will live inside of the file.
   > A component code in React is simply a function that will be exported. It is a special type of function in terms of what it returns i.e. JSX code. Other than that it is just a regular JavaScript function.

   React Component Example:
      src/components/ExpenseItem.js:
         function ExpenseItem() {
            return <h2>Expense Item</h2>;
         };
         export default ExpenseItem;

   > The convention is to name the function the same as the component name without the .js extension name.
   > You must return something in a function by calling the return() method. Note in the example above, since we are returning a <h2> element, we can write this onto a single line without wrapping it in the round brackets.
   > The round brackets signals to JavaScript that the return statement/code are one and the same statement even if they should span across multiple lines.
   > To use the component you must export it, otherwise it is only useable within the file itself which is not helpful.
   > The 'export default' keyword is used to export the function as the default function for this component file.
   > This component can now be imported in another file.
   > You will use this component like a regular HTML element inside of the html code written in the App.js component file.

   Importing React Component Example:
      src/App.js:
         import ExpenseItem from './components/ExpenseItem';
         function App() {
            return (
               <div>
                  <ExpenseItem></ExpenseItem>
               </div>
            );
         };
         export default App;
   
   > The 'import' keyword tells JavaScript the relative file path from App.js to the exported component function file to import from.
   > The imported function can now be used in the App.js like a regular HTML element.
   > The element name must be the same as the imported default function name which must be in PascalCase. This allows for the connection of the imported component function.
   > You can use either opening and closing tags or self closing tags e.g. <ExpenseItem></ExpenseItem> or <ExpenseItem />.
   > Lowercase Elements are default HTML elements while PascalCase Elements are custom made components created by the developer. This allows for React to detect the custom component from regular HTML elements.

------------------------------------------------------------------------------------
7. Writing a more Complex JSX Code:
------------------------------------------------------------------------------------
   > React has one important rule regarding JSX code that is returned from the Component function.
   > You must only have one root element per return statement / JSX code snippet.

   Incorrect JSX Code:
      return (
         <div>Date</div>
         <div>
            <h2>Title</h2>
            <div>Amount</div>
         </div>
      );

   > The above is invalid because there are two side by side <div> elements (both being root elements being returned by the function).
   > One of the simplest work workaround fix is to wrap the whole code in a single root <div> element which abides by the rule that a component can only return a single root element.

   Valid JSX Code:
      return (
         <div>
            <div>Date</div>
            <div>
               <h2>Title</h2>
               <div>Amount</div>
            </div>
         </div>
      );

   > The single parent <div> element can have multiple div elements inside it that can be side by side. This demonstrates that you should only return a root/parent element that must be a single element from your component function.