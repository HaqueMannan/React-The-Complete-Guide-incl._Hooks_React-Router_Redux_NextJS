Debugging React Apps - Summary:
1. Understanding React Error Messages
2. Analysing Code Flow & Warnings
3. Working with Break Points
4. Using React DevTools

------------------------------------------------------------------------------------
1. Understanding React Error Messages:
------------------------------------------------------------------------------------
   > Sometimes when you write your React App code you will come across errors.
   > The React/React Development process catches these errors and will throw them at you within the console or the browser development environment.

   Error Message Example:
      src/App.js:
         const App() => {
            ...
            return (
               <section id="goal-form">
                  <CourseInput onAddGoal={addGoalHandler} />
               </section>
               <section id="goals">
                  {content}
               </section>
            );
         };

   Node Console:
      $: Adjacent JSX elements must be wrapped in an enclosing tag. Did you want a JSX fragment <>...</>?(41:6)

   > In the above example (ignoring JSC fragment as we have not come across that topic), you should be able to understand this error.
   > The error message will provide the file that has thrown the error, the (line number: character number) where the error has occurred and also sometimes display a snippet of the code that contains the error.
   > Your IDE may also be able to detect some errors (but not all) and show it via a squiggly red underline.
   > This error is telling you that JSX requires neighbouring errors to be wrapped in an enclosing tag i.e. you need to wrap neighbouring child elements under one root elements when returning JSX code.

   Error Message Example:
      src/App.js
         const App() => {
            const addGoalHandler = enteredText => { ...}; 
            return (
               <div>
                  <section id="goal-form">
                     <CourseInput onAddGoal={addGoalsHandler} />
                  </section>
                  <section id="goals">
                     {content}
                  </section>
               <div>
            );
         };

      React Browser Developer Tool:
         ReferenceError: addGoalsHandler is not defined
         App
         src/App.js:40

   > In this example we see the function 'addGoalsHandler' is not defined as the error. This is a very clear error message like the previous example.
   > Some variable/function is trying to be used which is not found by React. When you go to the file to check the code, you will notice why the function was not found i.e. a typo or you forgot to define such a variable/function altogether. In the above example it was a typo.
   > Therefore, read the error message, have a look at the line that is causing the error message and the code snippet displayed in the error message, connect the errors together to the snippet being pointed at and you should be able to find and solve most error messages you come across.

------------------------------------------------------------------------------------
2. Analysing Code Flow & Warnings:
------------------------------------------------------------------------------------
   > You may come across errors that do not throw a compilation error in your terminal console and which will not show up on the main browser development environment screen.
   > For example, you may have a component which is used to add to a list. When you try to delete the item from the list the wrong element is deleted.
   > There are a couple of ways you can resolve this error...

   Code Flow & Warning Error:
   src/components/CourseGoalList/CourseGoalList.js:
      ...
      const CourseGoalList = (props) => {
         return (
            <ul className="goal-list">
               {props.items.map((goal) => (
                  <CourseGoalItem id={goal.id} key={goal.id} onDelete={props.onDeleteItem}>
                     {goal.text}
                  </CourseGoalItem>
               ))}
            </ul>
         );
      };

   src/components/CourseGoalList/CourseGoalItem.js:
      ...
      const CourseGoalItem = (props) => {
         const deleteHandler = () => {
            props.onDelete(props.id);
         };
         return (
            <li className="goal-item" onClick={deleteHandler}>
               {props.children}
            </li>
         );
      };

   src/App.js:
      ...
      const App = () => {
         ...
         const addGoalHandler = enteredText => {
            setCourseGoals((prevGoals) => {
               const updatedGoals = [...prevGoals];
               updatedGoals.unshift({ text: enteredText, id: 'goal1' });
               return updatedGoals;
            });
         };
         const deleteItemHandler = (goalId) => {
            setCourseGoals((prevGoals) => {
               const updatedGoals = prevGoals.filter(goal => goal.id !== goalId);
               return updatedGoals;
            });
         };
         ...
         if(courseGoals.length > 0) {
            content = (
               <CourseGoalList items={courseGoals} onDeleteItem={deleteItemHandler} />
            );
         };
         return (
            <div>
               <section id="goal-form">
                  <CourseInput onAddGoal={addGoalHandler} />
               </section>
               <section id="goals">
                  {content}
               </section>
            </div>
         );
      };

   Method 1 - Trace the error through your code:
   > You can try to trace backwards from the place where you have the deletion logic. In this example, you would start with the CourseGoalList Component file where we have the 'onDelete' prop which takes in a 'props.onDeleteItem' function. There is no issues here, so you would go to the Component that will receive the 'onDeleteItem' function prop i.e. the '<CourseGoalItem onDelete={props.onDeleteItem} />'.
   > The CourseGoalItem Component has a 'onClick' event which calls the 'deleteHandler' method. Looking at the 'deleteHandler' method there does not seem to be any problems here with the code. The method receives a parameter 'props.onDelete(props.id)' so we will need to look at the 'id' parameter being received by this Component.
   > There are no issues with the both CourseGoalList and CourseGoalItem Components which should direct you to look at the App.js file where the CourseGoalList Component would ultimately be rendered. You should notice that the 'CourseGoalList items={courseGoals} onDeleteItem={deleteItemHandler} />' Component has a 'deleteItemHandler' method which receives a goalID parameter. The 'deleteItemHandler' is the method that is responsible for deletions.
   > On investigation of the 'deleteItemHandler' method, you would know that the deletion logic in general seems to work but the wrong item is deleted and this could be due to the goalID being wrong. Therefore, this should trigger you to look at the place in your code where the id's are being generated and assigned. This would be in the 'addGoalHandler' method.
   > In the 'addGoalHandler' method you would notice that the id is set to a hardcoded string value 'id: 'goal1'. Therefore, you have introduced a logical error here i.e. assigning the same id value to every new item added. Therefore, the item are not distinguishable by the id and this causes the issue whereby when you click to delete an item, the first item found with that id within the array gets deleted which is not the desired result.
   > This is the logical mistake that causes the first item added to the array to be deleted (i.e. in the UI new items appear at the top of the list while older items appear towards the bottom. Thus, the first item in the array would be the bottom element that gets removed which is what you would see visually in the browser).
   > This is one method to narrow down the error by going down the chain of events i.e. you checked each steps to narrow down the problem.

   Method 2 - Browser's Developer Tools, JavaScript Console:
   > An alternative method is to open the browser's JavaScript console (View > Developer > JavaScript Console).
   > Here you would see an error message of: 

   JavaScript Console Example:
      (x)> index.js:1 Warning: Encountered two children with the same key, `goal1`. Keys should be unique so that components maintain their identity across updates. Non-unique keys may cause children to be duplicated and/or omitted â€” the behavior is unsupported and could change in a future version.
         at ul
         at CourseGoalList (http://localhost:3000/static/js/main.chunk.js:765:21)
         at section
         at div
         at App (http://localhost:3000/static/js/main.chunk.js:266:95)
   
   > You would have got this warning message as soon as you added the second Goal Item.
   > The warning message will implicitly let you know what the issue is in relation to i.e. the List 'Keys' prop must be unique. It also tells you where it is located i.e. from CourseGoalList, section, div, App. This should lead you back to the App.js file which contains the logical error.
   > Ensure in your Chrome browser JavaScript Console that you turn on "Enable JavaScript source maps" option so that the error message will point to your development files and not the compiled file. You should see the Settings Cog within the developer tool to turn on the settings under the 'Preferences' Tab under 'Source' Section.
   > Important Note: This solution above might not work and has to do with the React application setup with Webpack (hence the example JavaScript Console is showing the error in the compiled code and not the source code).

------------------------------------------------------------------------------------
3. Working with Break Points:
------------------------------------------------------------------------------------
   > Another approach to debugging is by going on the sources tab within the browser's developer tool. This contains the source files being used to display your application.
   > The React development process provides a bridge between the code that runs in the browser and the code you wrote.
   > Within the Sources > Page tab you should see a folder starting with 'Users/...' and if you expand this folder and then the 'src' folder you will find your React files (the same ones within your IDE).
   > You can dive dive into the different parts of your source code and by clicking on the numbered line within a file you can add a breakpoint at that line.
   > Adding breakpoint allows you to pause the execution of the code and strep through the code step by step so that you can find the problem.
   > The code will pause at the place where you placed a breakpoint only when you execute the code that has the breakpoint.
   > The browser will display a Paused in debugger message and you can see various pieces of information related to your code at the paused state within the developer tools i.e. Scope variables, Call Stack, etc.
   > You can step through the code step by step by pressing the 'step into next function call' button, 'step over next function call' button or 'step' button within the developer debugger tools.
   > You can hover over variables to see the current value or alternatively look at the Scope region to see the currently stored values within the variables.
   > This should help you debug your code by visually stepping through the code logic and viewing the functions and variable values to detect where in your code the issues lies. Once identified you can go back into your IDE and update the source code to correct the error.
   > This is how you can use breakpoint to help debug your React code.
   > Important Note: each browser has its own set of developer tools for debugging code within the browser. You are not limited to developing and testing within the Chrome browser only.

------------------------------------------------------------------------------------
4. Using React DevTools:
------------------------------------------------------------------------------------
   > FInally, there is a dedicated tool available for React development which can help with React specific problems and understanding your React application.
   > React Developer Tools is an extension you can use on your browser. Google Chrome (https://chrome.google.com/webstore/detail/react-developer-tools/fmkadmapgofadopljbjfkapdkoienihi?hl=en) and Mozilla Fire Fox (https://addons.mozilla.org/en-GB/firefox/addon/react-devtools/) have it as an extension you can download for the browser.
   > The extension is totally free to install to the browser. After installing, restart your browser.
   > Within the developer tool of the browser there should be two new tools tabs called "Components" and "Profiler".
   > The 'Components' tab tool displays a Component Tree of the React App. This displays only actual React Components and the Component Structure that is responsible for the UI output.
   > Hovering over the component will highlight the component on the browser screen.
   > You can click on the Component to retrieve more information about the Component i.e. all the props for that Component and the set values it is receiving, the hooks that are being used by the Component e.g. useState hook,  which Component is responsible for rendering the selected Component, how close they are to each other and also the source code and the line that rendered the selected Component.
   > This is another great tool to directly play with your Components, Interface, State, etc. visually within the browser. This will provide you a greater understanding of how everything is connected and also being able to unit test out different use cases and scenarios.
   > This is the final tool at your disposal for analysing and understanding your React application.