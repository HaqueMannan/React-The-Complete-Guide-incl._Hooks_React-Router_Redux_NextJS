Styling React Components - Summary:
1. Setting Dynamic Inline Styles
2. Setting CSS Classes Dynamically
3. Introducing Styled-Components Package
4. Styled Components & Dynamic Props
5. Styled Components & Media Queries

------------------------------------------------------------------------------------
1. Setting Dynamic Inline Styles:
------------------------------------------------------------------------------------
   > While you create separate .css files for your Components and you are importing them into the Component .js files the CSS styles is not scoped to the particular Component. The style continues to be  global and would affect any elements in any Component file that contain the class name.
   > You can add inline CSS styles to JSX elements similar to regular HTML by using the 'style' prop.
   > The 'style' prop in React requires a JavaScript object instead of a string. Hence the double curly bracket syntax.
   > Using key:value pairs within the object will add the style for the styling property.
   > If the style property has a hyphen in the name you should either wrap it in single quotes or use the camelCase notation.
   > You can use the ternary operator to make the inline style dynamic.

   Dynamic Inline Style Example:
      return (
         <form onSubmit={formSubmitHandler}>
            <div>
               <label style={{ color: !isValid ? 'red' : 'black' }}>Course Goal</label>
               <input style={{ borderColor: !isValid ? 'red' : 'black', background: !isValid ? 'salmon' : 'transparent' }} type="text" onChange={goalInputChangeHandler} />
            </div>
            <Button type="submit">Add Goal</Button>
         </form>
      );

   > In the above example, the 'style' prop is passed an object. The 'color' style is the key. The value, however, uses the ternary operator to dynamically set the value to either red or black depending on the condition if isValid variable is not true i.e. false. The label will now change colour based on this condition.
   > The same is true for the border-colour property which is written in camelCase notation (it could have been wrapped in single quotations).
   > Note: the code could be refactored so that the logic is handled and output stored in a variable outside the JSX snippet.
   > Note: you can use the formSubmitHandler function to check if the input has a valid input and return true or false as the value for the 'isValid' variable using state which will help dynamically control the label input colour to be rendered.
   > You can add multiple inline styles by separating each key:value pair with a comma separator.
   > Inline styles has the highest priority in CSS which will overwrite all other styles in CSS. Therefore, the above inline style approach may not be a good approach as you would have two styles in different locations that would compete against each other and the inline style will always take precedence due to it's high priority in CSS.
   > Thus, what alternative approach do we have to set styles dynamically using inline styles?

------------------------------------------------------------------------------------
2. Setting CSS Classes Dynamically:
------------------------------------------------------------------------------------
   > An alternative method to setting inline styles dynamically is to use CSS Classes.
   > You can create the styles inside of the Component's CSS file and then dynamically set the CSS Class on the JSX element.

   Setting CSS Classes Dynamically Example:
      src/components/CourseGoal/CourseInput/CourseInput.css:
         .form-control.invalid input {
            border-color: red;
            background: #ffd7d7;
         }
         .form-control.invalid label {
            color: red;
         }

      src/components/CourseGoal/CourseInput/CourseInput.css:
         ...
         import './CourseInput.css';
         const CourseInput = props => {
            ...
            return (
               <form onSubmit={formSubmitHandler}>
                  <div className={`form-control ${!isvalid? 'invalid' : ''}`>
                     <label>Course Goal</label>
                     <input type="text" onChange={goalInputChangeHandler} />
                  </div>
                  <Button type="submit">Add Goal</Button>
               </form>
            );
         };

   > You would simply use JSX's double curly bracket syntax to dynamically inject dynamic JavaScript expressions. This will allow you to dynamically add classes to the JSX element.
   > Vanilla JavaScript has something called 'template literals' which allows you to concatenate strings together and inject variable/expression values into the string using a cleaner syntax. Everything inside of the two back-ticks (``) is treated as a string including variable/expression values.
   > To inject a variable inside of a template literal you would use the JavaScript syntax of ${} where the variable name would be inside of the curly brackets.
   > In the above example if isValid is not true the class is set to 'form-control.invalid'. else the class will be 'form-control'.
   > The CSS file has two styles targeting specifically the styling of the label and input elements where the parent element has a class of 'form-control.invalid'.
   > This is a powerful technique because you can now revert back to working with CSS files to contain CSS styling and use template literal syntax to dynamically add/remove classes on an element to control the elements styling.
   > It will become Reacts job to add/remove classes in the DOM while you specify the different states to control the styling.

------------------------------------------------------------------------------------
3. Introducing Styled Components Package:
------------------------------------------------------------------------------------
   > Styles in the CSS files are not scoped to the Component file they relate to (i.e. it is global in scope). While it is not necessarily a problem because you can be very careful about your selectors. You can use class selectors or id selectors in CSS to ensure the class/id that are being selected are only used in the places where you want the style to be applied to.
   > However, in larger projects with a potentially large development team woking on the code, the classes/id could potentially be used twice in different Component CSS files. Therefore, there is a chance of styles spilling over to other Components and you might want to avoid this.
   > There are various ways to avoid this issue, but below are two popular methods:
      1. Use a package called styled-components (https://styled-components.com/).
      2. Use CSS Modules

   > Styled-Components is a package that helps you build Components that have certain styles attached to them where the styles really on affect the Components in which they are attached to.
   > To use styled-components you would need to open up terminal and navigate to your project directory to run the following npm install command:
      $: npm install --save styled-components
   > Important Note: if you have your development server running using 'npm start', stop the server first by pressing ctrl + c on your keyboard in the terminal that is running the server. You can then run the above npm command to install the package to your project. After installing you can re-run your development server again.
   > the package will be downloaded and added to the node_modules folder and the package.json file will be updated to include this package as a dependency for your project.
   > Once the package is installed you can use the library in your project.

   Styled-Components Example:
      src/components/UI/Button/Button.js:
         import styled from 'styled-components';
         const Button = styled.button `
            color: white;
            background: #8b005d;
            cursor: pointer;
            &:focus {
               outline: none;
            }
            &:hover,
            &:active {
               background: #ac0e77;
            }
         `;
         export default Button;

   > This uses JavaScript tagged template literal feature and is not specific to the styled-components package or to React. You can use this tagged template literal syntax in any regular JavaScript file.
   > The .button is a method on the styled object which is imported from styled-components library. Instead of calling the button method using round brackets you use back-ticks instead.
   > In the end the button method will be executed as a method behind the scenes and what you pass between the two back-ticks will be passed into the method just in a special way.
   > The button method will return a new button Component.
   > The styled-components package has methods for all HTML Elements such as .p for <p>, .h1 for <h1>, .div for <div>, etc.
   > The back-ticks allows you to write a multi-line code. You would add your CSS styles here.
   > There is no need to include the selector for the element itself i.e. for the button element you do not need the .button CSS element selector. This is because the back-ticks styles will directly affect the element.
   > For any pseudo selectors you would use the '&' symbol instead of the element. This tells the method that you want a special pseudo selector for the component which is created by the method.
   > In the example above, this will give you a button element with all the styles. The button that is returned also by default applies all the props you might pass into your own Button Component which you are exporting. Therefore, you can still use props such as 'onClick', 'type', etc. which will all be forwarded by the styled-components package to the core built-in button which is now used inside of the button method.
   > You no longer require the React import statement because you are no longer dealing with JSX within the file. You React application should continue to work as normal using the styled-components package.
   > If you now inspect the button in the browser you will notice something different. You will notice that there is a very strange class. These are class names dynamically generated by the styled-components package.
   > the styled-package library looks at the styles and wraps the styles into generated class names where it guarantees that every class name is unique and it will add these classes as global CSS. Since you have unique class names for every Styled Component, the styles setup on the Component will never be able to affect (spill over) another Component.
   > This is how the styled-components library works.

------------------------------------------------------------------------------------
4. Styled Components & Dynamic Props:
------------------------------------------------------------------------------------
   > You can create styled-components within a separate Styled Component file but you can also create within a React Component file.
   > While we have seen the general rule of one Component per file, you can have multiple Components within a file.


   Styled-Components & className Example:
      src/components/CourseGoals/CourseInput/CourseInput.js:
         import React, { useState } from 'react';
         import styled from 'styled-components';
         ...
         const FormControl = styled.div`
            margin: 0.5rem 0;
            & label {
               font-weight: bold;
            }
            & input {
               display: block;
               width: 100%;
               border: 1px solid #ccc;
            }
            & input:focus {
               outline: none;
               background: #fad0ec;
            }
            &.invalid input {
               border-color: red;
               background: #ffd7d7;
            }
            &.invalid label {
               color: red;
            }
         `;
         const CourseInput = props => {
            ...
            return (
               <form onSubmit={formSubmitHandler}>
                  <FormControl className={!isValid && 'invalid'}>
                     <label>Course Goal</label>
                     <input type="text" onChange={goalInputChangeHandler} />
                  </FormControl>
                  <Button type="submit">Add Goal</Button>
               </form>
            );
         };

   > In the above example you now have two Components within a single file. The FormControl is being used within the JSX to return a <div> element.
   > You can use class identifiers to dynamically add to the class name for the Component. In the above 'className={!isValid && 'invalid'}' will add 'invalid' to the class name if the isValid is not set to true. This will trigger the styled-component's '&.invalid input' and '&.invalid label' CSS styles. This is one way to dynamically style your components using the styled-components library.
   > You can also add props to your styled-components and utilise those props within the back-ticks.

   Styled-Components & Dynamic Props Example:
      src/components/CourseGoals/CourseInput/CourseInput.js:
         import React, { useState } from 'react';
         import styled from 'styled-components';
         ...
         const FormControl = styled.div`
            margin: 0.5rem 0;
            & label {
               font-weight: bold;
               color: ${props => props.invalid ? 'red' : 'black'};
            }
            & input {
               display: block;
               width: 100%;
               border: 1px solid ${props => props.invalid ? 'red' : '#ccc'};
               background: ${props => props.invalid ? '#ffd7d7' : 'transparent'};
            }
            & input:focus {
               outline: none;
               background: #fad0ec;
            }
         `;
         const CourseInput = props => {
            ...
            return (
               <form onSubmit={formSubmitHandler}>
                  <FormControl invalid={!isValid}>
                     <label>Course Goal</label>
                     <input type="text" onChange={goalInputChangeHandler} />
                  </FormControl>
                  <Button type="submit">Add Goal</Button>
               </form>
            );
         };
   
   > The 'invalid' prop (you can name this whatever you want because it is your own prop) will feed back into your styled-component which you can use to dynamically style your component.
   > You can use JavaScript template literal to inject expression values. Therefore, the style 'border: 1px solid ${props => props.invalid ? 'red' : #ccc};' will check for the 'invalid' prop to see whether the value is true or false to dynamically set the colour either red or off-white.
   > Therefore, you now have a way to dynamically change the style of the styled-components using the props that are passed to your styled-component.
   > In this example there is no need for the '&.invalid input' and '&.invalid label' CSS styles within the styled-component.
   > The behaviour of the component should remain the same as before but now using 'Dynamic Props' to dynamically Style your styled-components.
   > This concept can sometimes be hard to understand but it is a really useful way of working with Components and styles.

------------------------------------------------------------------------------------
5. Styled Components & Media Queries:
------------------------------------------------------------------------------------
   > Media Queries is a technique introduced in CSS3 using the '@media' keyword to change the style of HTML elements based on the screen size the webpage is being viewed on. This allows the content of the application to dynamically change based on the screen size whether being viewed on a PC, Tablet or Phone.
   > The Media Queries works exactly the same as you would use in normal CSS styling.

   Media Query on Styled-Components Example:
      src/components/UI/Button/Button.js:
         import styled from 'styled-components';
         const Button = styled.button `
            width: 100%;
            border: 1px solid #8b005d;
            color: white;
            background: #8b005d;
            ...
            @media(min-width: 768px) {
               width: auto;
            }
         `;

   > In this example the button default width is 100%. However, the media query will change the width to auto whenever viewing the application on a phone. This will now dynamically display the button depending on the screen size of the device the application is being viewed on.