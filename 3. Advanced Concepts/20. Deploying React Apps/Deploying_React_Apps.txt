Deploying React Apps - Summary:
1. Deployment Steps
2. Adding Lazy Loading Optimisation
3. Building the Code for Production
4. Deployment (Uploading Files) to a Server and Exploring Routing Issues

------------------------------------------------------------------------------------
1. Deployment Steps:
------------------------------------------------------------------------------------
   > There are a couple of steps you would need to go through when you deploy or re-deploy your React Application to a live web server:
      1. Develop your application code
      2. Test your application code
      3. Optimise your application code
      4. Build your application for production (using a build script)
      5. Upload production code (i.e. from step 4) to a live Server.
      6. Configure Server (i.e. configure the web hosting provider's offerings)
   > Following these steps will allow you to deploy your application to the web for the whole world to use.

------------------------------------------------------------------------------------
2. Adding Lazy Loading Optimisation:
------------------------------------------------------------------------------------
   > Once you have developed and tested your application code and are happy with what your have built you are then ready to move onto the next step of optimising your application code.
   > Optimisation does not mean only that you should write your code using best practices and so on but rather that it includes looking at the performance improvements which you can consider.
   > A performance improvements can include something like using React 'memo' to avoid unnecessary component re-render cycles.
   > Another very important optimising concept is called "Lazy Loading". "Lazy Loading" means that you load certain chunks of your code only when that code is needed. It is super important to keep in mind that with a React Single Page Application, you in the end build one big JavaScript code bundle and this entire bundle needs to be downloaded by ever visitor of your website in order to use the website.
   > Therefore, a visitor of the website needs to wait for all the code to be downloaded before they see something on the screen and the web application is useable.
   > You would want to make sure that this initial code bundle to be downloaded is as small as possible and certain part of your code is only downloaded if you actually visit the part of the page.
   > "Lazy Loading" is all about splitting your code into multiple chunks/bundles which are then only downloaded when they are needed.
   > "Lazy Loading" is easy to implement if you are using routing because you can split your code by route so that a code for a specific route is only downloaded when that route is visited.
   > Below is an example of how you could implement "Lazy Loading" into your application.

   Lazy Loading Example:
      src/App.js:
         import React, { Suspense } from 'react';
         import { Route, Switch, Redirect } from 'react-router-dom';
         import Layout from './components/layout/Layout';
         import LoadingSpinner from './components/UI/LoadingSpinner';
         const AllQuotes = React.lazy(() => import('./pages/AllQuotes'));
         const QuoteDetail = React.lazy(() => import('./pages/QuoteDetail'));
         const NewQuote = React.lazy(() => import('./pages/NewQuote'));
         const NotFound = React.lazy(() => import('./pages/NotFound'));
         const App = () => {
            return (
               <div>
                  <Layout>
                     <Suspense fallback={<div><LoadingSpinner/></div>}>
                        <Switch>
                           <Route exact path="/"><Redirect to="/quotes" /></Route>
                           <Route exact path="/quotes"><AllQuotes /></Route>
                           <Route path="/quotes/:quoteId"><QuoteDetail /></Route>
                           <Route path="/new-quote"><NewQuote /></Route>
                           <Route path="*"><NotFound /></Route>
                        </Switch>
                     </Suspense>
                  </Layout>
               </div>
            );
         };
         export default App;

   > The '.lazy()' method is built into the React library which allows you to implement "Lazy Loading" i.e. code splitting. This method wants a function (you can define this outside or use a inline function) which resolves to a dynamic import. This is a modern JavaScript syntax that is supported by the Create-React-App project setup.
   > In the anonymous function you call the import as a function passing in the path of the import as the argument.
   > The result is stored in a const variable. In the above example this is named "NewQuote" because it is used to load the "NewQuote" Component from this import location.
   > The function passed to 'React.lazy()' will only be executed by React when the "NewQuote" Component is needed. This is the key difference to the imports i.e. it will not be executed in advance to download the code in advance but only when it is needed. This therefore creates a separate code chunk which is only downloaded when the "NewQuote" page is visited.
   > While the "<NewQuote />" Component is used in the App.js file when defining and setting up the the routes of the application, the Component is only resolved and loaded dynamically thanks to React's "Lazy Loading" using the anonymous function passed to it. The other imports would be downloaded when the application loads.
   > This alone will not be enough to setup "Lazy Loading". The problem with Lazy Loading is that the download could take a couple of milliseconds/seconds to complete. Whilst downloading the code React is not able to continue and therefore you need to define a fallback UI (i.e. some fallback content that can be shown if the download takes a bit longer to complete).
   > Import the 'Suspense' Component from the React library. This is a special Component provided by the React library which allows you to wrap the code where you use 'React.lazy()'. The 'Suspense' Component requires a fallback prop which expects some JSX code as a value which will show up as the fallback UI while the chunk of code is being downloaded via lazy loading.
   > Now that you have "Lazy Loading" implemented you will notice in the browsers developer tools network tab when you now visit the "NewQuote" page you will see a request being sent to the server to download the Lazy Loaded code chunk from the server.
   > You can use "Lazy Loading" for whichever pages you wish to load whenever the route is loaded allowing for a more optimised application in terms of performance.
   > "Lazy Loading" can be an important building block of an application because it makes the initial code bundles smaller. For smaller application it is totally optional to implement "Lazy Loading" optimisation. However, for larger application with lots of pages where all the pages then also have a lot of Components and complex logic attached, in such applications "Lazy Loading" can really make the initial loading of your website much faster.

------------------------------------------------------------------------------------
3. Building the Code for Production:
------------------------------------------------------------------------------------
   > Having completed the deployment steps 1 to 3, you are now ready to build your production code bundle.
   > You can run a script which takes all your development code and convert it to JavaScript code that the browser understands and code that is as small and bundled up as possible.
   > In the package.json file you will see a couple of scripts which are baked into the Create-React-App project setup (e.g. "start", "build", "test", etc).
   > The 'npm start' command runs a script under the hood that transforms your code so that it runs in the browser but does not optimise your code and it also spins up a development server which hosts the development code. This command is used when you are developing and testing your application code.
   > The 'npm run build' command will transform your code but optimise and shrink the code bundle as much as possible and will not start a server. This is the command you would need to run in the terminal while cd to your project directory whenever you want to build your production code.
   > This will create a 'build' folder in your project which will contain the bundled production code for your application. This is the folder you would need to move onto your server as part of step 5 of the deployment steps.
   > You should never change the code inside of the build folder. The files in this folder will be overwritten automatically whenever you re-run the "npm run build" in the terminal.
   > You should change the code only in the "src" and "public" folder which is where your development code lives.
   > The "static" folder inside of the "build" folder is the location that contains all the optimised, bundled and browser ready JavaScript application code.

------------------------------------------------------------------------------------
4. Deployment (Uploading Files) to a Server and Exploring Routing Issues:
------------------------------------------------------------------------------------
   > Now that you have built your production code the next step is to move that production code to a server (i.e. upload to some hosting provider so that it is made available to visitors to all over th world).
   > Important Note: a Single Page Application is a static website. This means that it is only made up of HTML, CSS and browser side JavaScript. There are no server side code involved.
   > The JavaScript is not node.js code it is browser side JavaScript code. Therefore, this code executes inside of the browser. Hence the entire build folder contains no code needed at all to be executed on a server (i.e. no NodeJS, PHP, Python, C#, etc).
   > You could build your own backend i.e. your own API instead of using Firebase (which has been used in the example codes as a dummy API) but this is entirely different story. However, when it comes to just a React application it is just a static website with no server side code involved.
   > Therefore, when you want to deploy such a React Single Page Application you need a Static Site Host. You do not need a hosting provider that allows you to run server side code.
   > You can Google for Static Website Hosting Providers to find the best hosting website for you application. You can use any hosting provider and are not limited to Firebase (even if you used their database for the backend  API for your application).
   > You would want to upload only the "build" folder and its content to the hosting server.

   > It is important to understand that there is a difference between server-side and client-side routing.
   > We use React Router to define routes and load different Components based on the URL. However, it is really important to understand that all this code executes in the browser. React Router is a browser side package (it is even called 'react-router-dom'). It has a look at the URL and changes what the user sees on the screen after the React app was loaded by the browser.
   > When you enter a URL and hit enter this does not happen in one step. Instead you have a Server and a Client.

   [/some-route]----->[Server][Production Ready Code]--------
      |                                                     |
   (Request)                           (Response - HTML, CSS, JS React Code)
      |                                                     |
      ------[Client (User)]<-------------------------[/some-route]

   > The Client is the user using the browser while the Server is a remote machine which hosts your production-ready React code (this code does not live on the users machine).
   > If a user visits your page by entering the domain (and maybe some path thereafter), this sends a request to the server for the website. This URL contains the full URL that was entered in the user's browser.
   > When the request hits the server, the server sends back a response which contains all the HTML, CSS and also the React JavaScript code (code built and upload to the server).
   > The React Router code contains the browser routing code which will have a look at the path (the part of the URL after the domain) evaluate it and bring the correct component to the screen. This only happens once the response is received.
   > The URL which the user entered with the specific path e.g. "domain-name.com/some-route" is also part of the requests i.e. the request that reaches the servers contains the full URL path. By default the server will look for different files which it would return as a response for the different URLs. This is how servers typically work.
   > When hosting Single Page Applications you want to ignore the additional path after the domain-name on the server and always return the same response no matter which path the user targets. This is required so that the React application will start up and it is the React application and React Router which will take another look at that URL and then render the correct content on the screen. Therefore, the server needs to ignore that path.
   > By default the server does not ignore the path after the domain-name. Therefore, you need to configure your servers so that it does ignore the additional paths in the URL. You will need to look up the documentation related to the specific hosting provider chosen and how to configure the server (In the case of Firebase it is very easy because using their CLI will ask whether to ignore the path i.e. re-write all urls to index.html?).
   > Therefore no matter which kind of URL request was sent to the server it always returns the same HTML file which in turn requests always the same JavaScript code no matter what the URL was.
   > This is the final important step in the deployment steps (i.e. step 6 configuring the server).
   > Once you have uploaded your files (deployed) to the server and have configured your server on the hosting platform you now have a React application that is accessible to anyone on the web.
   > For more information related to deployment of a Create-React-App Project visit https://create-react-app.dev/docs/deployment/.