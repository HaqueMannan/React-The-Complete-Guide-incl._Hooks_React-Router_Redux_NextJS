{"version":3,"sources":["components/comments/Comments.module.css","components/comments/NewCommentForm.module.css","components/comments/CommentItem.module.css","components/comments/CommentsList.module.css","components/quotes/HighlightedQuote.module.css","components/comments/NewCommentForm.js","components/comments/CommentItem.js","components/comments/CommentsList.js","components/comments/Comments.js","components/quotes/HighlightedQuote.js","pages/QuoteDetail.js"],"names":["module","exports","NewCommentForm","props","commentTextRef","useRef","useHTTP","addComment","sendRequest","status","error","onAddedComment","useEffect","submitFormHandler","event","preventDefault","enteredText","current","value","commentData","text","quoteId","className","classes","form","onSubmit","LoadingSpinner","control","htmlFor","id","rows","ref","actions","CommentItem","item","CommentsList","comments","map","comment","Comments","useState","isAddingComment","setIsAddingComment","useParams","getAllComments","loadedComments","data","addedCommentHandler","useCallback","length","onClick","HighlightedQuote","quote","author","QuoteDetail","getSingleQuote","loadedQuote","match","useRouteMatch","path","exact","to","url"],"mappings":"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","file":"static/js/4.a251c259.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"comments\":\"Comments_comments__iZX-v\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"NewCommentForm_form__2Te8b\",\"loading\":\"NewCommentForm_loading__2veC2\",\"control\":\"NewCommentForm_control__3NVeP\",\"actions\":\"NewCommentForm_actions__2fwWP\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"CommentItem_item__24mbD\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"comments\":\"CommentsList_comments__valp0\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"quote\":\"HighlightedQuote_quote__nE9T6\"};","import React, { useRef, useEffect } from 'react';\n\nimport classes from './NewCommentForm.module.css';\nimport LoadingSpinner from '../UI/LoadingSpinner';\n\nimport useHTTP from '../../hooks/use-http';\nimport { addComment } from '../../lib/api';\n\nconst NewCommentForm = (props) => {\n   const commentTextRef = useRef();\n   const { sendRequest, status, error } = useHTTP(addComment);\n   const { onAddedComment } = props;\n\n   useEffect(() => {\n      if(status === 'completed' && !error) {\n         onAddedComment();\n      };\n   }, [status, error, onAddedComment]);\n\n   const submitFormHandler = (event) => {\n      event.preventDefault();\n\n      const enteredText = commentTextRef.current.value;\n      // Optional: Could Validate Here\n\n      sendRequest({ commentData: { text: enteredText }, quoteId: props.quoteId });\n   };\n\n   return (\n      <form className={classes.form} onSubmit={submitFormHandler}>\n         {status === 'pending' && (\n            <div className=\"centered\">\n               <LoadingSpinner />\n            </div>\n         )}\n         <div className={classes.control} onSubmit={submitFormHandler}>\n            <label htmlFor=\"comment\">Your Comment</label>\n            <textarea id=\"comment\" rows=\"5\" ref={commentTextRef}></textarea>\n         </div>\n         <div className={classes.actions}>\n            <button className=\"btn\">Add Comment</button>\n         </div>\n      </form>\n   );\n};\n\nexport default NewCommentForm;","import React from 'react';\n\nimport classes from './CommentItem.module.css';\n\nconst CommentItem = (props) => {\n   return (\n      <li className={classes.item}>\n         <p>{props.text}</p>\n      </li>\n   );\n};\n\nexport default CommentItem;","import React from 'react';\n\nimport CommentItem from './CommentItem';\nimport classes from './CommentsList.module.css';\n\nconst CommentsList = (props) => {\n   return (\n      <ul className={classes.comments}>\n         {props.comments.map((comment) => (\n            <CommentItem key={comment.id} text={comment.text} />\n         ))}\n      </ul>\n   );\n};\n\nexport default CommentsList;","import React, { useState, useEffect, useCallback } from 'react';\nimport { useParams } from 'react-router-dom';\n\nimport classes from './Comments.module.css';\nimport NewCommentForm from './NewCommentForm';\nimport LoadingSpinner from '../UI/LoadingSpinner';\nimport CommentsList from './CommentsList';\n\nimport useHTTP from '../../hooks/use-http';\nimport { getAllComments } from '../../lib/api';\n\nconst Comments = () => {\n   const [isAddingComment, setIsAddingComment] = useState(false);\n   const params = useParams();\n   const { quoteId } = params;\n\n   const { sendRequest, status, data: loadedComments } = useHTTP(getAllComments);\n\n   useEffect(() => {\n      sendRequest(quoteId);\n   }, [sendRequest, quoteId]);\n\n   const startAddCommentHandler = () => {\n      setIsAddingComment(true);\n   };\n\n   const addedCommentHandler = useCallback(() => {\n      sendRequest(quoteId)\n   }, [sendRequest, quoteId]);\n\n   let comments;\n\n   if(status === 'pending') {\n      comments = (\n         <div className=\"centered\">\n            <LoadingSpinner />\n         </div>\n      );\n   };\n\n   if(status === 'completed' && (loadedComments && loadedComments.length > 0)) {\n      comments = (\n         <CommentsList comments={loadedComments} />\n      );\n   };\n\n   if(status === 'completed' && (!loadedComments || loadedComments.length === 0)) {\n      comments = (\n         <p className=\"centered\">No comments were added yet!</p>\n      );\n   };\n\n   return (\n      <section className={classes.comments}>\n         <h2>User Comments</h2>\n         {!isAddingComment && (<button className=\"btn\" onClick={startAddCommentHandler}>Add a Comment</button>)}\n         {isAddingComment && <NewCommentForm quoteId={quoteId} onAddedComment={addedCommentHandler} />}\n         {comments}\n      </section>\n   );\n};\n\nexport default Comments;","import React from 'react';\n\nimport classes from './HighlightedQuote.module.css';\n\nconst HighlightedQuote = (props) => {\n   return (\n      <figure className={classes.quote}>\n         <p>{props.text}</p>\n         <figcaption>{props.author}</figcaption>\n      </figure>\n   );\n};\n\nexport default HighlightedQuote;","import React, { Fragment, useEffect } from 'react';\nimport { useParams, Route, Link, useRouteMatch } from 'react-router-dom';\n\nimport Comments from '../components/comments/Comments';\nimport HighlightedQuote from '../components/quotes/HighlightedQuote';\nimport LoadingSpinner from '../components/UI/LoadingSpinner';\n\nimport useHTTP from '../hooks/use-http';\nimport { getSingleQuote } from '../lib/api';\n\nconst QuoteDetail = () => {\n   const { sendRequest, status, data: loadedQuote, error } = useHTTP(getSingleQuote, true);\n   const match = useRouteMatch();\n   const params = useParams();\n   const { quoteId } = params;\n\n\n   useEffect(() => {\n      sendRequest(quoteId);\n   }, [sendRequest, quoteId]);\n\n   if(status === 'pending') {\n      return(\n         <div className=\"centered\">\n            <LoadingSpinner />\n         </div>\n      );\n   };\n\n   if(error) {\n      return(\n         <p className=\"centered\">{error}</p>\n      );\n   };\n\n   if(!loadedQuote.text) {\n      return(\n         <p>No Quote Found!</p>\n      );\n   };\n\n   return (\n      <Fragment>\n         <HighlightedQuote text={loadedQuote.text} author={loadedQuote.author} />\n         <Route path={match.path} exact>\n            <div className=\"centered\">\n               <Link className=\"btn--flat\" to={`${match.url}/comments`}>Load Comments</Link>\n            </div>\n         </Route>\n         <Route path={`${match.path}/comments`}><Comments /></Route>\n      </Fragment>\n   );\n};\n\nexport default QuoteDetail;"],"sourceRoot":""}