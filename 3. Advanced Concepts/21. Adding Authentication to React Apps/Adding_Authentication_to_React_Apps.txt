Adding Authentication to React Apps - Summary:
1. Introduction to Authentication (the What, How & Why?)

------------------------------------------------------------------------------------
1. Introduction to Authentication (the What, How & Why?):
------------------------------------------------------------------------------------
   > Authentication is needed if content should be protected (i.e. not accessible by everyone).
   > Protected content can mean different things. Sometimes you would have pages on your site that should be locked if users are not authenticated for example a user's change password page. Proected content could also be data that you are storing to a backend database i.e. API enpoints which the React application might be sending requests on certain pages that should be locked for non-authenticated users. There are many other examples for what proected content could mean for your application.
   > Therefore, authentication is all about making your application secure from unauthoised access and does not necessarily have to be in relation to pages but also protected endpoint API URLs to prevent any unaythorised user access/changes to the database.
   > Now that we know why we need authentication, how does authentication work in general?
   > Authentication in general is a two-step process: 1) Get Access/Permission and 2) Send request to the protected resource(s).
   > To get the permission you always provide your credentials on a login form. This data is sent to a server to lookup a database to match the username and password combination stored on the database. Only if the credentials are valid the server will grant permission to the restricted resource content. You can send more requests to other secure enpoints with the permission attached. This is how authenticated generally works.

   Getting Permission:
               --------------Request with User Credentials---------------
               |                                                        |
      [Client (Browser)]                                             [Server]
               ^--------------------Response (Yes/No--------------------|

   > Is this permission enough? A "Yes" or "No" response alone is not enough to then access protected resources (API endpoints). It is not enough because a "Yes" or "No" response is easy enough to fake to a server i.e. you could skip the step of getting permission and sending a fake "Yes" permission to request for protected resources.
   > Authentication is a lot more elaborate than just sending and checking credentials. The response that is sent back by the server to the client must be more than just a "Yes" or "No" response.
   > There are two main approaches commonly used in Authentication:
      1) Working with Server-Side sessions
      2) Working with Authentication Tokens

   > Server-Side Sesssions are a traditional approach of handling authentication and are a great approach for handling authentication. Once a server grants you access that server stores a unique identifier for the specific client (i.e. the user who was granted access). Therefore, every visitor of a website who authenticates has their own identifier stored on the server. This identifier is also sent back to the client.
   > Both Server and Client knows this identifier. This identifier is attached to future requests to the server and since the server knows this identifier it cannot be faked.
   > Server-Side Sessions work great if your backend and frontend are tightly coupled. The one disadvantage of this approach is where you have decoupled ends i.e. the frontend is served on server A and the backend API is on server B then there is no tight coupling. You may want an API that should be used by many websites then the API cannot be tightly coupled and focused on one specific front end and instead needs to stay flexible. Therefore, you do not want to store an identifier on a server. The server should be stateless i.e. it should not store this kind of data about the connected clients.
   > You may have to deal with decoupled frontend and backend situations especially when building Single Page Applications.

   > Authentication Tokens are the same as Server-Side Sessions but with one key difference. The client sends their credentials to a server and the server validates the credential combination, if valid the server creates a permission token which is a very long string with some data encoded into that string (using some algorithm). The token can be decoded back into the individual pieces of data.
   > The token is generated by the server using a specific algorithm along with a key which is used for hashing that data into a string which is only known by the server and not by the client. The token is not stored by the server but it is sent back to the client but only the server knows how to create that token because of the key that is involved to create the token. The client can use this token to attach it to future requrests to grant permission to protected resources on the server.
   > Even though the server has not stored the identifier (as it would with Server-Side Sessions approach) the server is still able to verify that the token was created by the server and was not faked. Only the server knows the key and the incoming token attached to the request for some protected resource can be validates by the server i.e. the server can check if that token could be created by the server.
   > This approach allows for decoupling of frontend and backend.
   > When working with "Authentication Tokens", these tokens are typically created in the "JSON Web Token" Format (JWT). Those "tokens" are really just long strings which are constructed by an algorithm that encodes data into a string (with help of a private key, only known by the server).You can learn more about JSON Web Tokens (JWTs) on this link https://jwt.io/.