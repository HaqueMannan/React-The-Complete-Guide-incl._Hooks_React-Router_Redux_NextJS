A Deep Dive Introduction into Next.js - Summary:
1. What Is and Why Use Next.js?

------------------------------------------------------------------------------------
1. What Is and Why Use Next.js?:
------------------------------------------------------------------------------------
   > NextJs offers a lot of features that makes building large scale production ready React applications easier i.e. it is a React framework for production.
   > React is a JavaScript library for building user interfaces i.e. it is a third part package which you can add to your front end projects (client side JavaScript code) to build interactive User Interface (UI). This is a library that makes building complex UI much easier than it would be with just vanilla JavaScript. It is a library because it focuses on that UI part through Component, State and Props.
   > If you want to build large scale React projects, you typically want to also need to add extra libraries for routing, authentication, etc.
   > NextJS is labelled a Framework. It is a framework that build up on React.
   > The difference between Framework and Library is that a Framework is bigger, has more features and focuses on more things and it provides clear rules/guidance on how you should write your code, structure files and so on.
   > NextJS goal is to solve the common problems of building production React apps and it enhances React by adding many core features which you would have had to add on your own in React for example routing.
   > Therefore, you no longer need to reinvent the wheel because a lot of the feature you would typically need for a production React applications is available right out of the box and you would not need to add as much third part libraries to solve common problems which is needed in larger applications.
   > What are the key features and benefits of a NextJS applications?
      1) Server Side Rendering:
         - This is the most important and key feature NextJS adds. Server Side Rendering is all about preparing the content of a page on the server instead of on the client. If you inspect a regular client side React applications you would see a very bar-bones HTML page with a <div id="root"> element which the React applications is loaded and rendered to. All of that rendering is done by React and done on the client side JavaScript i.e. inside of the browser of the user and not on the server.
         - This may not be a problem but it can also be a problem. For example, if your page also fetches some data from a server that should be displayed then the user might initially see some loading state (i.e. a flickering page for a fraction of second whilst the request is on its way fetching the data). Data fetching only begins once the JavaScript code executed on the client and you still need to wait for the outgoing response for that request, simply because the page which you requested did not contain that data already. This might not necessarily be a problem but it may not also be the user experience you want for your users.
         - This can be a problem for Server Engine Optimisation (SEO). This does not matter for all pages for example if you have an administration dashboard which is only reached by logging in then SEO does not matter because it will never see the dashboard as it is highly user specific requiring login. However, if you have a public facing page with a lot of content that should be found through search engines then SEO does matter.
         - The search engine crawlers will only see the empty HTML page when scanning your application pages that you are getting from the server and therefore will be ranked very low on search engine results.
         - Server Side Rendering can help you on this because if the page would be pr-rendered on the server (e.g. the data fetching occurs on the server) and the finished page would be served to the users and the search engine crawlers then the user will not see that flickering loading state and search engines would see the page content. This is a problem Server Side Rendering solves.
         - ReactJS actually has built-in features that allow you to add server-side rendering but it can be tricky to get this right. It also requires extra setup from your side. However, with NextJS it comes way easier because it has built-in server side rendering. NextJS automatically renders your pages and this means that if you build a standard NextJS app (without any extra setup from your side) if you visit such a page, it was pre-rendered on the server by default out of the box.
         - If you inspect the source code of a page from a NextJS application, you would see the HTML page rather than an empty HTML skeleton which is great for SEO and also helps with User Experience (UX) of not seeing that flickering load state.
         - It is worth noting that with NextJS, after the initial load/request, you still get a standard Single Page React application running in the browser. Subsequent navigation actions by the user are all handled by React within the browser to have this fast interactive UX which you typically want to offer with React applications.
         - NextJS blends client-side and server-side code together. This on its own is probably already a strong benefit/reason for why you might want to use NextJS for building React Projects instead of just ReactJS.
      2) File-Based Routing:
         - In traditional React you do not have a router, instead you give an illusion of having multiple pages. When you navigate around and load different pages then that is the job of a router (typically using React Router). The router basically watches the URL and when it changes it basically prevents the browser's default behaviour of sending a request to some backend server. Instead, it renders different content on the page (i.e. Components) with React.
         - Routing is basically changing what is visible on the screen based on the URL without sending a extra request to a server because you stay in that single page application which is typically built with React.
         - In React, Routing is setup in code and while it is not bad or wrong it is extra code which you have to write. Then often, you end up storing your Components that act as pages in a separate folder which kind of replicates your routes setup in code (e.g. if your have three pages setup as pages in code you would then have three page Components in the pages Component folder).
         - NextJS gets rid of that in-code route definition. Instead, you define pages and routes with files and folders instead of code. NextJS applications have a special pages folder (which has to be named pages) and then you are structuring that folder to define the routes and path you page supports.
         - This allows you to get rid of extra code i.e. less code, less work and highly understandable concept (i.e. similar to how you started with web development using vanilla HTML, CSS and JavaScript files).
         - NextJS still supports all the features you might want such as nested routes or dynamic routes with dynamic parameters, etc.
      3) Fullstack Capabilities:
         - NextJS makes it easy for us as a developer to add backend code to React projects so as to build a Full Stack React Projects.
         - You can build a Full Stack React Projects where you don't just have the client side code maybe with Server Side Pre-rendering but where you also have standalone backend code that for example works with the file system or reaches out to a database. NextJS makes it easy to add your own backend API into your React Project using NodeJS code.
         - This makes it easy to add code for storing data to a database/files, retrieving data, adding authentication, etc. using NextJS.
         - Therefore, can do not need to build a standalone REST API project but can stay in one NextJS project (you would need to have some NodeJS coding knowledge but that is a requirement for building on the backend) where you have all the client side code (React UI) and also blend in your backend API code.
   > There are more features but the three mentioned above are the core/key features of NextJS and why you would want to use this framework to build a production React application.