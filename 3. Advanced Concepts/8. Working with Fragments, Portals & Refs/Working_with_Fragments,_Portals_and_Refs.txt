Working with Fragments, Portals & Refs - Summary:
1. JSX Limitations and Workarounds
2. Creating a Wrapper Helper Component
3. React Fragments
4. Introducing React Portals & Working with Portals
5. Working with Refs
6. Controlled vs Uncontrolled Components

------------------------------------------------------------------------------------
1. JSX Limitations and Workarounds:
------------------------------------------------------------------------------------
   > JSX is the code that you return from your Components which in the end will be rendered to the real DOM via React.
   > JSX has certain limitations. Once specific limitation we have already come across is with adjacent root level JSX elements.

   JSX Limitation Example:
      return(
         <h2>Hello World</h2>
         <p>This does not work</p>
      );

   > The above will throw an error whenever we use two elements side by side without wrapping it within a single root element. In JSX you cannot return more than one "root" JSX element (and you cannot store more than one "root" JSX element in a variable).
   > In JSX, the "root" JSX element may have more children which can be adjacent to one another.

   React Converted JSX Code to Regular JavaScript Example:
      return(
         React.createElement('h2', {}, 'Hello World');
         React.createElement('p', {}, 'This does not work');
      );

   > The above provides the example JavaScript code that React would convert the JSX code into. JavaScript cannot return more than one thing and in the above where there are adjacent "root" element this is the error we are generating with our JSX code.
   > In JavaScript you can only return one thing whether its is a string, number, boolean value, etc. You could return an array which can have multiple data but an array is already a new value which is just an object and therefore are only returning one object and not two arrays at the same time.
   > Any nested JSX elements within that one 'root' element is allowed because only one React.createElement() is returned with the other child JSX React.createElement() nested within.
   > How can we get around this natural JavaScript limitation?
   > One way is to wrap the adjacent elements with a <div> element.

   JSX Limitation Workaround Solution:
      return(
         <div>
            <h2>Hello World</h2>
            <p>This does not work</p>
         </div>
      );

   > The above returns one item similar to returning three numbers within a single array.
   > Important Note: it does not have to be a <div> element but it can be any element that wraps around the adjacent elements.

   JSX Limitation Workaround Alternative Solution:
      return(
         [
            error && (<ErrorModal key="error-modal" title={error.title} message={error.message} onConfirm={errorHandler} />),
            <Card key="add-user-card" className={classes.input}>
               <form onSubmit={addUserHandler}>
                  <label htmlFor="username">Username</label>
                  <input id="username" type="text" value={enteredUsername} onChange={usernameChangeHandler} />
               </form>
            </Card>
         ]
      );

   > Another workaround is to use the native JavaScript array.
   > React is able to work with arrays of JSX elements. However, whenever you work with an array of JSX elements, React would want a 'key' prop on every element to distinguish a list of elements. This is true whether you dynamically generate the list of elements or hardcode the list of elements.
   > You can also hardcode the 'key' prop values and your application will continue to work.
   > Typically, you would not use this solution because wrapping in an array and adding those keys is a little bit cumbersome. It is more simple to use the first solution of wrapping within a single 'root' element.
   > The problem with the first solution is that it will lead to a new problem of '<div> soup' as demonstrated below.

   <div> Soup Example:
      <div>
         <div>
            <div>
               <h2>Some content</h2>
            </div>
         </div>
      </div>

   > This can really happen where the DOM has rendered many nested React Components and all those Components for various reasons needs wrapping <div> or wrapping Components. This causes all these unnecessary <div> or wrapper elements being rendered to the real DOM even though they are only there because of the workaround solution to the limitations of JSX.
   > In bigger apps, you can easily end up with tons of unnecessary <div> (or other elements) which add no semantic meaning or structure to the page but are only there because of React/JSX's requirement.
   > Rendering unnecessary content is generally never a good practice in programming because it can make your application slower because React would need to render all those elements and check some/all those elements if content needs to change. Hence, this wrapping element solution is OK but not ideal.

------------------------------------------------------------------------------------
2. Creating a Wrapper Helper Component:
------------------------------------------------------------------------------------
   > Another trick within React to solve the previous problem with adjacent Components is to create a Wrapper Component.
   > Within the src/components directory you can create a sub-folder called 'Helpers'. This best describes what kind of Component will live in this sub-folder.

   Wrapper Helper Component Example:
      src/components/Helpers/Wrapper.js:
         const Wrapper = (props) => {
            return props.children;
         };
         export default Wrapper;

      src/components/Users/AddUser.js:
         import Wrapper from '../Helpers/Wrapper';
         const AddUser = (props) => {
            ...
            return(
               <Wrapper>
                  {error && (<ErrorModal title={error.title} message={error.message} onConfirm={errorHandler} />)}
                  <Card className={classes.input}>
                     <form onSubmit={addUserHandler}>
                        <label htmlFor="username">Username</label>
                        <input id="username" type="text" value={enteredUsername} onChange={usernameChangeHandler} />
                        <Button type="submit">Add User</Button>
                     </form>
                  </Card>
               </Wrapper>
            );
         };

   > The Wrapper Component simply returns the 'props.children' as a value.
   > The '.children' prop holds all the content that is passed between the opening and closing tag of your custom Component. This is valid code.
   > You can now use the Wrapper Helper Component in any other files. Simply import the Wrapper Component and use it as a regular React Component.
   > The <Wrapper /> Component has no other meaning than fulfilling the JSX requirement. The Wrapper is an empty component and all that it does is return everything in-between the opening ans closing tags of the <Wrapper> Component. The application will continue to work as normal.
   > While the Wrapper will not render anything to the DOM; however, the JSX requirement is not that there must be one root component being rendered to the DOM but rather a requirement that there must be one root element that is returned or stored in a variable.
   > This is a technical requirement which works around JavaScript requirement of the return statement should return only one thing. The adjacent nested content will not be a problem because you never directly return them in your JSX code which is why this solution would work. The benefit of this approach is that you no longer have the problem of unnecessary rendering <div> (or other elements) as wrapper elements i.e. avoiding the "<div> soup" problem.

------------------------------------------------------------------------------------
3. React Fragments:
------------------------------------------------------------------------------------
   > With the custom Wrapper Helper Component, you can now use a trick to fulfil the JSX limitation requirement without ending up with "<div> soup".
   > Since this solution is so convenient and obvious (once seen in action) the Wrapper Component is not a component you would need to create on your own. Instead, it comes built-in with react. The previous section was to demonstrate how the React.Fragment wrapper Component works.

   React Fragment Syntax Example:
      return(
         <React.Fragment>
            <h2>Hello World</h2>
            <p>This does not work</p>
         </React.Fragment>
      );

   or

      return(
         <>
            <h2>Hello World</h2>
            <p>This does not work</p>
         </>
      );

   > The <React.Fragment /> Component is the Component you would import from React. Alternatively, you can use the empty element syntax shortcut but this will depend on your project setup because the build process would need to support this shortcut syntax.
   > This creates an empty wrapper Component which does not render any real HTML element to the DOM but it fulfils React/JSX's requirement.
   > If you create your React app using Create-React-App terminal tool then it is configured to use the shorthand syntax.

   Importing React Fragment Syntax Example:
      import React from 'react';
      const Component = () => {
         return(
            <React.Fragment>
               <h2>Hello World</h2>
               <p>This does not work</p>
            </React.Fragment>
         );
      };

   or

      import React, { Fragment } from 'react';
      const Component = () => {
         return(
            <Fragment>
               <h2>Hello World</h2>
               <p>This does not work</p>
            </Fragment>
         );
      };

   > If you use the <React.Fragment /> Component, you need to ensure that you import React from 'react' in your Component file.
   > Alternatively, you can import Fragment as a named import which will allow you to use the <Fragment /> Component syntax.

------------------------------------------------------------------------------------
4. Introducing React Portals & Working with Portals:
------------------------------------------------------------------------------------
   > React Portals, another useful feature and similar to Fractals, allows you to write cleaner code.

   Fractal Example:
      return(
         <React.Fractal>
            <My Modal />
            <MyInputForm />
         </React.Fractal>
      );

   Rendered Real DOM:
      <section>
         <h2>Some other content... </h2>
         <div class="my-modal">
            <h2>A Modal Title!</h2>
         </div>
         <form>
            <label>Username</label>
            <input type="text" />
         </form>
      </section>

   > Technically, the above Rendered Real DOM is perfectly fine. However, the modal would not be ideal because semantically and from a "clean HTML structure" perspective, have this nested modal is not ideal. It is an overlay to the entire page after all (this is similar for side-drawers, other dialogue, etc.).
   > This is not a good structure which could lead to some real problems such as with styling and accessibility if you have such nested overlay content. For example, if a screen reader has to interpret your HTML code which is being rendered, it might not see the modal as a general overlay. This is because the CSS styling would not matter too much to a reader and also from a semantic perspective the modal is deeply structured in other HTML code.
   > Therefore, it is not obvious the modal should be an overlay to all the content on the page.
   > This is similar to the problem if you style a <div> element like a <button> and adding an event listener to it. It will work technically but is not a good practice i.e. it is bad for accessibility and not good for other developers who are working on the project.
   > React Portals is another React concept to get over this problem with overlay content which should not be deeply nested within the HTML rendered code.
   > Portals will allow you to keep the syntax structure we have seen above in the JSX code but React will render the real DOM different as seen below:

   Rendered Real DOM with Portals:
         <div class="my-modal">
            <h2>A Modal Title!</h2>
         </div>
         <section>
         <h2>Some other content... </h2>
         <form>
            <label>Username</label>
            <input type="text" />
         </form>
      </section>

   > The modal HTML will live somewhere else than where it would normally go to when being rendered to the DOM when you use this Portal concept. Therefore, the JSX does not need to change but the rendered HTML would be rendered slightly differently to overcome this semantic limitation problem.

   > Portals require two things: a place where you want to port the Component to and then you need to let the Component know that it should have a portal to that place.
   > To mark the place place, it is common that you would go into the index.html file within the public directory to create a <div> element with an id which you can then use to identify/mark the place later.

   Marking a Portal Example:
      public/index.html:
         <!DOCTYPE html>
         <html lang="en">
            <head>...</head>
            <body>
               <noscript>You need to enable JavaScript to run this app.</noscript>
               <div id="backdrop-root"></div>
               <div id="overlay-root"></div>
               <div id="root"></div>
            </body>
         </html>

   > You could create multiple such roots for different kinds of Components which should be portal to. In the example above there is one portal for the backdrop and another for all other kinds of overlays.
   > You can now go back to the Component e.g. the ErrorModal and tell React that the Component should be portal somewhere.

   Adding a Portal to a Component Example:
      import React from 'react';
      import ReactDOM from 'react-dom';
      const Backdrop = (props) => {
         return(<div className={classes.backdrop} onClick={props.onConfirm} />);
      };
      const ModalOverlay = (props) => {
         return(
            <Card className={classes.modal}>
               <header className={classes.header}>
                  <h2>{props.title}</h2>
               </header>
               <div className={classes.content}>
                  <p>{props.message}</p>
               </div>
               <footer className={classes.actions}>
                  <Button onClick={props.onConfirm}>OK</Button>
               </footer>
            </Card>
         );
      };
      const ErrorModal = (props) => {
         return(
            <React.Fragment>
               {ReactDOM.createPortal(
                  <Backdrop onConfirm={props.onConfirm}/>,
                  document.getElementById('backdrop-root')
               )}
               {ReactDOM.createPortal(
                  <ModalOverlay title={props.title} message={props.message} onConfirm={props.onConfirm}/>,
                  document.getElementById('overlay-root')
               )}
            </React.Fragment>
         );
      };

   > In the above example the Modal has been split into two separate Components within a single Component file which is allowed within React.
   > The 'react-dom' package is the adaptor for the 'react' package for the Browser. Therefore, you need to import something from 'react-dom' package in the Component file. In the above example we called this ReactDOM but could have been called anything you would have liked.
   > You can now use the JSX expression to use the ReactDOM JavaScript code.
   > On the ReactDOM imported object you can now call on the .createPortal() method. This method takes in two arguments, the first is the React Node that should be rendered i.e. the Component (written in JSX) and the second is a pointer to that container within the Real DOM where this React Node element should be rendered to.
   > The DOM API is used to select the element where the Component should be rendered to i.e. documents.getElementById('') or documents.getElementByClassName('') depending on how you have identified the portal location. This must be a Real DOM element that you are selecting as the second element using the DOM API provided by the browser.
   > No matter where you would use your ErrorModal Component within your JSX code the portal will allow the backdrop and overlay (e.g. Modal) Component to be rendered at the portal location no matter how where you use your ErrorModal in your JSX code, no matter how deeply nested it is within other elements.
   > Using JSX you would set the new Backdrop 'onConfirm' prop to 'props.onConfirm' so that it can forward the function you get from the 'onClick' to the Backdrop component copy. This is to ensure everything continues to work since you are looking for 'props.confirm' function inside of the Backdrop Component.
   > Similarly using JSX you pass the props required for the new ModalOverlay copy i.e. title, message and onConfirm.
   > The rendered HTML content is now moved somewhere else using the React Portals concept but you continue to use your <ErrorModal /> as you normally would within your JSX code. This now creates a semantically better HTML code.
   > Important Note: The ReactDOM.createPortal() can be used anywhere where you would otherwise use JSX code. Hence wrapping it in curly brackets because you are calling JavaScript code.
   > You would continue to work with your JSX Components as you would normally. However, you would use the ReactDOM.createPortal() method to portal/move the Components HTML content somewhere else, only within the Actual/Real DOM that is being rendered.

------------------------------------------------------------------------------------
5. Working with Refs:
------------------------------------------------------------------------------------
   > 'Refs' are a shortform for References within React.
   > In the most basic form, 'refs' allows us to get access to other DOM elements and work with them.
   > 'Refs' are a very powerful tool within Reacts and you will come to learn that you would end up working with them a lot in React development.
   > An example where 'refs' can be used to make our React code better is with inputs. You can manage what a user inputs into an <input/> element by simply keeping track of it i.e. you have a state and with every key stroke you update that state. You feedback the state into the <input/> field and then use that state later on to reset the input and also to the place where you need the data. This is a perfectly fine way of managing this. However, updating the state on every key stroke when you only need it when you submit the form sounds a bit redundant. This is a scenario where 'refs' can be used to help you ('refs' are not limited to this scenario only).
   > 'Refs' allows you to setup a connection between a HTML element which is being rendered and your other JavaScript code.

   Refs Example:
      src/component/Users/AddUser.js:
         import React, { useState, useRef } from 'react';
         const AddUser = (props) => {
            const nameInputRef = useRef();
            addUserHandler = (event) => {
               const enteredName = nameInputRef.current.value;
               if(enteredName.trim().length === 0 || enteredUserAge.trim().length === 0) {
                  setError({
                     title: 'Invalid Input',
                     message: 'Please enter a valid name and age (non-empty values).'
                  });
                  return;
               };
               props.onAddUser(enteredName, enteredUserAge);
               nameInputRef.current.value = '';
            };
            ...
               return(
                  <Wrapper>
                     {error && (<ErrorModal title={error.title} message={error.message} onConfirm={errorHandler} />)}
                     <Card className={classes.input}>
                        <form onSubmit={addUserHandler}>
                           <label htmlFor="username">Username</label>
                           <input id="username" ref={nameInputRef} type="text" />
                           ...
                        </form>
                     </Card>
                  </Wrapper>
               );
         };

   > To create a 'Ref' you need to import a named import (i.e. another React Hook) from the 'react' library called 'useRef'. This allows you to call the useRef() as a method within your functional Component.
   > Just like with all other React Hooks, the useRef Hook is only useable inside of a functional Components.
   > The useRef Hook takes in a default value that you want to initialise it to. The useRef Hook returns a value which allows you to work with that reference later i.e. it allows you to work with the element to which you are going to connect with.
   > The return value can be named as anything you would want it to be called. In the example above 'nameInputRef' was used to describe the useRef Hook will be used with the <input id="username" /> element.
   > The ref's are then initialise to undefined because that is the default for useRef Hooks where no initial value is passed in as a argument/parameter.
   > To let React know that it should connect the useRef Hook to an element, you would go to that element and add a special prop called 'ref'.
   > Just like with the 'key' prop, it is a built-in prop that can be added to any HTML element. This is because you can connect any HTML elements to your references.
   > A connection will be established. The first time React reaches and renders the return JSX code, it will set the value stored in the 'nameInputRef' reference to the native DOM element that is rendered based on the <input/> element. This is really important because what would end up inside of the 'nameInputRef' in the end would be a real DOM element later.
   > The useRef Hook that is being generated will always be an object that always has a 'current' property. This 'current' property holds the actual element value that it is connected with. Therefore, in the above example this would be the input (with an id of username) element that is being stored as a value in the current property (i.e. the actual input#username DOM Node).
   > You can now manipulate and do all kinds of things to the actual Real DOM Node. It is recommended that you DO NOT manipulate the real DOM Node. The DOM should only be manipulated by React i.e. you use React to do all the heavy lifting.
   > Reading data from the input does not sound too bad because you are not changing anything to the Real DOM Node element because you are only reading data.
   > The '.current' is the reference to the connected element and every <input> element has a 'value' property we can access, hence, 'nameInputRef.current.value' allows you to read the input element value.
   > You can now get access to the current value stored within the element without having to log every keystroke. Therefore, you no longer need State to read the user's input.
   > You can store the current value within an element such as an input element within a variable.
   > This will shorten your code significantly as you do not need State and the Handler methods to reset the state on submissions.
   > Removing the State will lose the functionality of resetting the form on submission. You could use the State based solution to bring this back functionality; however, you can do something that you should rarely do but is OK for this scenario of a input field value you wish to reset i.e. reset the actual DOM Node element without React (e.g. nameInputRef.current.value = '';).
   > Rarely use 'Refs' to manipulate the DOM. In the input scenario you are not really manipulating the DOM (i.e. not adding a new DOM element or changing a CSS class) but rather changing what the user has entered which is OK for the scenario of resetting an input element after a form submission.
   > You could always use the State based solution.
   > Neither the State based solution or the Refs based solutions are better than each other. This will all depend on your use case scenario; for example, if you only want to read a value then you do not need State. Using State as a keylogger is not a great solution because you will have to write a lot of unnecessary code and therefore Refs is better to use in that case scenario.
   > This is an introduction to 'refs' and a use case where you can use 'refs' but you will learn more other use cases as you progress with your learning of more advanced topics.

------------------------------------------------------------------------------------
6. Controlled vs Uncontrolled Components:
------------------------------------------------------------------------------------
   > Using the useRef() approach of interacting with DOM elements (specifically with input elements) has a special name. This is known as Uncontrolled Components if accessing values using a ref.
   > The input components would be Uncontrolled Components because the internal State (i.e. values within the Component) is not controlled by React. You rely on the default behaviour of the input element i.e. the user is able to enter a value and that entered value is reflected on screen. You are simply fetching the data using a React Refs feature but you do not feed back into the input.
   > When you reset the fields input values, this is not using React but rather manipulating the real DOM element using the DOM API.
   > For the reasons mentioned above this is the reason behind why a Component using Refs are known as Uncontrolled Components.
   > When a Component is managed using the useState() approach of reading and updating an element value i.e. where you also feed back into the input state, this is known as Controlled Components.
   > The internal state is controlled by React and therefore the Component is controlled.
   > Controlled and Uncontrolled Components are important terms that you should keep in mind for potential interviews or discussions with other React developers because they are typical terms you hear within the React development world.