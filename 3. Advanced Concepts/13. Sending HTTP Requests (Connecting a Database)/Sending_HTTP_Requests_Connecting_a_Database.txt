Sending HTTP Requests: Connecting a Database - Summary:
1. How Not to Connect to a Database and Introduction to APIs
2. Sending a GET Request
3. Using Async/Await
4. Handling Loading & Data States
5. Handling HTTP Errors
6. Using the useEffect() Hook for Requests
7. Sending a POST Request

------------------------------------------------------------------------------------
1. How Not to Connect to a Database and Introduction to APIs:
------------------------------------------------------------------------------------
   > Browser-side code (i.e. Client Side Code) should never directly talk to a database.
   > You may have a database (SQL, NoSQL, ...) running on a database server which you might want to fetch and store some data and therefore might want to establish a connection between your React Application and the Database Server; however, that is something you should never do (and will never see this will real world application, unless it is a highly insecure and poorly written application).
   > If you directly connected to a database server from inside of your client-side JavaScript code, you will expose your database credentials to the public. All JavaScript code running in the browser can be accessed and read not just by the browser but also by the users of your web application (i.e. accessible via the Browser's Developer Tools). You can view this article on this: https://academind.com/tutorials/hide-javascript-code/.
   > Directly connecting to a database servers can bring other issues such as performance issues but the security problem is the biggest problem of all.
   > You would always take a different route. You should have a backend application running on another machine/server (not running on the browser). This can be on the same server as the database but is often on a different server.
   > The backend server can be written with any server-side language of your choice (e.g. NodeJS, PHP, ASP.NET, etc.) and it is this backend server that will do the talking to the database. This is because you can safely store and use database credentials on the backend application since that backend code cannot be viewed by your users. This is because it is on a different server and users of your website will never see that code.
   > Thus, React will then talk to that backend server (i.e. to the backend API typically - a server which exposes different URLs which requests can be sent to) which allows you to have a safe connection to the database.
   > Throughout this section we will use the Start Wars API (https://swapi.dev/) to explore how to send HTTP requests in React application. This is an API (i.e. a backend app) and not a database. Behind the scenes it probably uses some database to store some data about the Star Wars movies, but we as the user interact with this backend app.
   > API stands for Application Programming Interface. This is a very broad term and not just related to React and HTTP requests. In the end it means that in our code we are dealing with something which has a clearly defined interface/rules on how we can achieve certain results and perform certain tasks.
   > When we talk about APIs in the context of HTTP requests, we typically talk about "REST" or "GraphQL" APIs. These are two different standards for how a server should expose its data.
   > The Start Wars API uses a "REST API" which means it exposes a couple of URLs (e.g. 'https://swapi.dev/api/people/1') to which you send that request to get back data in a certain format. Different URLs to which you send different requests will give you different chunks of data. This is what makes it an API. You have different entry points which lead to different results.
   > You can read this article to learn more about APIs ad what they are: https://academind.com/tutorials/rest-vs-graphql/.

------------------------------------------------------------------------------------
2. Sending a GET Request:
------------------------------------------------------------------------------------
   > A React application at the end of the day is regular JavaScript code. Therefore, you can use any send HTTP requests in JavaScript solutions you want. For example, you can use the Axios library or the built-in Fetch API.
   > The Fetch API is built into browsers and allows us to fetch data and also to send data (even though the name does not imply it). We can use this API to send HTTP Requests and work with with responses.

   Fetch API code Example:
      src/App.js:
         function App() {
            function fetchMoviesHandler() {
               fetch('https://swapi.dev/api/films/').then(
                  response => { return response.json(); }
               ).then(
                  data => { setMovies(data.results); }
               );
            };
            return (
               <React.Fragment>
                  <section><button onClick={fetchMoviesHandler}>Fetch Movies</button></section>
                  <section><MoviesList movies={movies} /></section>
               </React.Fragment>
            );
         };

   > In the above example, we would create our own function. Within the function body we can use the 'fetch()' method. The browser makes the 'fetch()' function available to us.
   > In its simplest form, as the first argument/parameter, we only need to pass in the URL to which you want to send a HTTP request to as a string.
   > The second optional argument/parameter that can be passed into the 'fetch()' function is a JavaScript object. This object allows you to configure various options for the request e.g. adding an extra headers, body or change the HTTP request method. The default method is GET.
   > The GET request method sends a request to the URL link to retrieve data from that server.
   > The fetch() method returns a promise which then allows us to react to the returned HTTP response or any potential errors that you may receive.
   > A promise is an object which will eventually yield some data (instead of immediately providing the data) because sending a HTTP request is a asynchronous task. This means that the task could take a couple of seconds or milliseconds to complete (or fail).
   > Therefore, you cannot continue to execute the next line of code and use the result immediately, instead the result will be there at some point in the future. This is why promises exist for in JavaScript. You would use the '.then()' onto the function that will be called whenever we get a response.
   > The '.catch()' can be added to handle any potential errors (e.g. 'fetch('https://swapi.dev/api/films/').then(...).catch(...)').
   > We would use an arrow function inside of the .then() promise which receives the response object as an argument/parameter. We can then do anything we want with the response within the callback function body. The response object contains a bunch of data about the response such as the response headers, status code, etc.
   > The Star Wars API returns back a response body which is formatted as a JSON format. JSON is a very popular data format for exchanging data. JSON stands for JavaScript Object Notation and as its name suggest the data is formatted as a JavaScript Object using key:value pairs for each data property. Note that there are no methods but purely data.
   > The advantage of JSON data is that it is very easy to translate it to JavaScript objects. However, there is a translation step required to transform the JSON data. The response object has a built-in method for automatically translating JSON responses body to a real JavaScript object which you can use in your code. You would use the '.json()' method.
   > The '.json()' method itself returns a promise and therefore you should return the promise and then add another .then() .catch() block which will be fired once the data transformation has completed.
   > After the JSON transformation, you will receive the 'data' object as an argument/parameter to the '.then()' promise which you can use in your JavaScript code within the callback function body.
   > In the above example we use the 'data.results' (the API has a results key with a value of an array of movies) to store the information within some state which can then be used to display the array of movies.
   > To make everything work you would add the "fetchMoviesHandler" function to an event such as the 'onClick' event of the "Fetch Movies" button.

   https://swapi.dev/api/films/ Response Example:
      GET /api/films/
      HTTP 200 OK
      Content-Type: application/json
      Vary: Accept
      Allow: GET, HEAD, OPTIONS
      {
      "count": 6, 
      "next": null, 
      "previous": null, 
      "results": [
         {
               "title": "A New Hope", 
               "episode_id": 4, 
               "opening_crawl": "It is a period of civil war.\r\nRebel spaceships, striking\r\nfrom a hidden base, have won\r\ntheir first victory against\r\nthe evil Galactic Empire.\r\n\r\nDuring the battle, Rebel\r\nspies managed to steal secret\r\nplans to the Empire's\r\nultimate weapon, the DEATH\r\nSTAR, an armored space\r\nstation with enough power\r\nto destroy an entire planet.\r\n\r\nPursued by the Empire's\r\nsinister agents, Princess\r\nLeia races home aboard her\r\nstarship, custodian of the\r\nstolen plans that can save her\r\npeople and restore\r\nfreedom to the galaxy....", 
               "director": "George Lucas", 
               "producer": "Gary Kurtz, Rick McCallum", 
               "release_date": "1977-05-25", 
               ...
         }

   Fetch API Mapped Data Example:
      function fetchMoviesHandler() {
         fetch('https://swapi.dev/api/films/').then(
            response => { return response.json(); }
         ).then(
            data => {
               const transformedMovies = data.results.map(
                  movieData => {
                     return {
                        id: movieData.episode_id,
                        title: movieData.title,
                        openingText: movieData.opening_crawl,
                        releaseDate: movieData.release_date 
                     };
                  }
               );
               setMovies(transformedMovies);
            }
         );
      };

   > Important Note: You would need to ensure that you format the data in your React application to either a) match the same property names of the JSON response object or b) transform the incoming data from the response object to match the format of your react application code.
   > For example, the Start Wars API has a property called "opening_crawl" and "release_date" so either the react application uses those property name in its code or transforms the incoming data to use "openingText" and "releaseDate" instead. The above example demonstrates the latter method being used.
   > The .map() method allows you to convert every object in the results array into a new object. It is then the new object which will be stored in the "transformedMovies" variable. We can use the "movieData" object (note: this argument/parameter could have been named anything you want) and extract the id, title, opening text and release date informations (i.e. the data interested in) into a new object.
   > You will now see that the React application initially has no movies, but when you click on the "Fetch Movies" button, the HTTP request will be sent and the response will be used to populate the list of Star Wars movies that is received from the Star Wars APIs response. It will take a short while but the data will be populated from the GET request.
   > This in a nutshell is how you would send a HTTP request to connect within a React Application to connect securely to a backend e.g. a backend database.

------------------------------------------------------------------------------------
3. Using Async/Await:
------------------------------------------------------------------------------------
   > Promises are nothing React specific. Promises are a JavaScript language feature.
   > When working with promises you can easily build up '.then' and '.catch' chains which can make the code harder to read or cause unexpected bugs within your code.
   > The alternative syntax you could use async/await which is a syntactical sugar but allows you to write asynchronous code i.e. promises without the need of using the nested '.then()' and '.catch()' calls. JavaScript behind the scenes will convert the async/await code into the traditional promise using '.this()' and '.catch()' blocks.

   Async/Await Promise Syntax Example:
      async function fetchMoviesHandler() {
         const response = await fetch('https://swapi.dev/api/films/');
         const data = await response.json();
         const transformedMovies = data.results.map(
            movieData => {
               return {
                  id: movieData.episode_id,
                  title: movieData.title,
                  openingText: movieData.opening_crawl,
                  releaseDate: movieData.release_date 
               };
            }
         );
         setMovies(transformedMovies);
      };

   > Simply add the 'async' keyword before the function name.
   > You would then use the 'await' keyword on the operation which is returning a promise for example like the '.fetch()' function.
   > The 'await' function can be stored in a variable and you can use the variable's response from the 'await' promise to perform your code logic with the response data.
   > The .json() is a promise so you would also add the 'await' keyword again to await the response of that promise which we can store in a variable (e.g. data).
   > The code is much more cleaner and easy to read using the Async/Await syntax for handling promises. The code continues to be asynchronous code.
   > This is not React specific but a default JavaScript feature.

------------------------------------------------------------------------------------
4. Handling Loading & Data States:
------------------------------------------------------------------------------------
   > Typically, you would want to show some loading spinner or at least some loading text while the HTTP request is being issued to signal to your users that data is on its way and the application is doing some work.
   > How would we manage this in the React world? In the end it is all about managing state.
   > To tell whether we are waiting or not for some data, you can introduce a state for this. The below example continues to build on from the previous example to demonstrate.

   Loading State Example:
      function App() {
         ...
         const [isLoading, setIsLoading] = useState(false);
         async function fetchMoviesHandler() {
            setIsLoading(true);
            const response = await fetch('https://swapi.dev/api/films/');
            const data = await response.json();
            const transformedMovies = data.results.map(
               movieData => {
                  return {
                     id: movieData.episode_id,
                     title: movieData.title,
                     openingText: movieData.opening_crawl,
                     releaseDate: movieData.release_date 
                  };
               }
            );
            setMovies(transformedMovies);
            setIsLoading(false);
         };
         return (
            <React.Fragment>
               <section><button onClick={fetchMoviesHandler}>Fetch Movies</button></section>
               <section>
                  {!isLoading &&  movies.length > 0 && <MoviesList movies={movies} />}
                  {!isLoading && movies.length === 0 && <p>No Movies Found.</p>}
                  {isLoading && <p>Loading...</p>}
               </section>
            </React.Fragment>
         );
      };

   > Using the isLoading state which is initially set to false, within the "fetchMoviesHandler" function we could set the value to that state to true. This will change the state when we start to load. Once we are done loading the data you would want to set the state back to false.
   > Using this state you can now display a load spinner Component or some loading text to the screen.
   > It is important to note that loading is not the only state you might have. You might also want to show a different content if you are not loading but there are no movies within the list at the moment (i.e. movies is an empty array with nothing to display). The '!isLoading &&  movies.length > 0 &&' performs this check and will conditionally display the list if the movies array is greater than 0 items.
   > You can have a fallback content if there are no content to be displayed (e.g. '{!isLoading && movies.length == 0 && <p>No Movies Found.</p>}').
   > This is a crucial part of building User Interfaces. You would want to let your users know what state the application currently has (i.e. there is a difference between no movies, loading and there are movies).

------------------------------------------------------------------------------------
5. Handling HTTP Errors:
------------------------------------------------------------------------------------
   > When sending HTTP requests things can also go wrong and you can encounter errors with your requests. These can be technical errors such as no internet connection or you do have connection but receive back an error response code from the server (e.g. 401, 404, 500, etc. - read more on error codes on: https://developer.mozilla.org/en-US/docs/Web/HTTP/Status).
   > You would want to handle HTTP errors otherwise this could cause a bad user experience (for example, the application hangs on the loading state). You would want to inform your users if something went wrong with the HTTP request such. Response errors are also sent back to the browsers JavaScript console.

   Handling Error State Example:
      function App() {
         ...
         const [error, setError] = useState(null);
         async function fetchMoviesHandler() {
            setIsLoading(true);
            setError(null);
            try {
               const response = await fetch('https://swapi.dev/api/films/');
               if(!response.ok) {
                  throw new Error('Something went wrong');
               };
               const data = await response.json();
               ...
            } catch(error) {
               setError(error.message);
            };
            setIsLoading(false);
         };
         return (
            <React.Fragment>
               <section><button onClick={fetchMoviesHandler}>Fetch Movies</button></section>
               <section>
                  {!isLoading &&  movies.length > 0 && <MoviesList movies={movies} />}
                  {!isLoading && movies.length === 0 && !error && <p>No Movies Found.</p>}
                  {isLoading && <p>Loading...</p>}
                  {!isLoading && error  <p>{error}</p>}
               </section>
            </React.Fragment>
         );
      };

   > If using promises using the traditional '.then()' method, you would use the '.catch()' block to handle the error logic. The '.catch()' block would use a callback function which would receive a "error" object.
   > When working with Async/Await you would use instead the try/catch block. You would 'try' some code and then 'catch' any potential errors. Whenever any errors are thrown by the 'try' block it will be caught and will trigger the 'catch' block passing the 'error' to that block as a argument/parameter.
   > Fetch does not treat error status codes as real errors. It will therefore not throw a technical error if you get back an error status code. This will be a problem using the default Fetch API.
   > The Axios library on the other hand would generate and throw a real error for error status codes.
   > If you are using the Fetch API you would have to throw the errors on your own when you receive error status codes.
   > The response object you get back has an 'ok' field. This signals whether the response was successful or not. The response also has a 'status' field which holds the concrete response status code which you could manually check as well.
   > Using both the if statement and the 'throw new Error()' together allows you to create your own real errors within your application code to overcome the shortcoming of the Fetch API. This error will be thrown if you had an unsuccessful response i.e. the 'response' object does not have an 'ok' property which will trigger the 'catch' block.
   > The if statement check should be placed before parsing the data so that the 'try' block throws an error (if one should occur on the HTTP request) before it starts to parse the response body.
   > You can now use this state to display the error message within your application.
   > The 'setIsLoading(false)' is set to false after the try/catch block so that no matter whether there is a successful or error response, the 'isLoading' state is set to false to stop the loading text from continuously showing after the promise code has resolved.
   > You can test this out using an invalid URL (e.g. 'await fetch('https://swapi.dev/api/film/')').
   > The exact implementation of handling an error response will depend on the API you are taking to i.e. some APIs send back a JSON data if the request was not successful while other APIs (such as Star Wars API) sends back non-JSON data.
   > This is how you can handle all the different states you may have when working with HTTP requests. This is very important because no matter which backend you talk with, you will always have these different states. It is important to know how to handle these scenarios of: waiting for a response, getting errors, getting back some data or the data is empty (i.e. no data returned).

   Handling Checks Elegantly Example:
      function App() {
         ...
         let content = <p>No Movies Found.</p>;
         if(movies.length > 0) { content = <MoviesList movies={movies} /> };
         if(error) { content = <p>{error}</p>; };
         if(isLoading) { content = <p>Loading...</p>; };
         return (
            <React.Fragment>
               <section><button onClick={fetchMoviesHandler}>Fetch Movies</button></section>
               <section>{content}</section>
            </React.Fragment>
         );
      };

   > Instead of all the inline checks within the JSX code, you could create a variable to handle this more elegantly. The content variable is updated based on the state and this is then what is rendered in the JSX code.
   > This is how you can handle all the different HTTP request states within your React application code.

------------------------------------------------------------------------------------
6. Using the useEffect() Hook for Requests:
------------------------------------------------------------------------------------
   > Typically in application, you would want to fetch the data as soon as a certain Component loads.
   > To immediately fetch data when the Component loads is to use the useEffect() Hook. This is because sending a HTTP request is a side effect which ultimately changes the Component State. You have learned that such side effects should go inside of the useEffect() Hook.
   > Having the "fetchMoviesHandler()" within a function is also perfectly fine as long as you do not call the function as part of the main Component function (e.g. "fetchMoviesHandler()" being called within 'function App() {}' function itself) because this will cause an infinite loop.

   Fetch Data on Component Loads using useEffect Example:
      function App() {
         const [movies, setMovies] = useState([]);
         const [isLoading, setIsLoading] = useState(false);
         const [error, setError] = useState(null);
         useEffect(() => {
            fetchMoviesHandler()
         }, []);
         async function fetchMoviesHandler() {...}
         render(...);
      };

   > You can leave the dependencies array empty and this will mean that the useEffect will only run once the very first time the Component was executed and loaded on the application initialisation.
   > However, it is best practice to list all the dependencies you use inside of the "fetchMoviesHandler" function within the useEffect() Hook's dependencies array.

   Dependencies Array Best Practice Example:
      useEffect(() => {
         fetchMoviesHandler()
      }, [fetchMoviesHandler]);

   > We point at the "fetchMoviesHandler" function because it is a dependencies of itself. If the function itself changes the useEffect should re-execute again.
   > The problem with this approach is that a function is an object and therefore the function would technically change whenever the Component re-renders which would create an infinite loop if the function pointer is added as a dependency. One solution would be to omit it (as originally seen). But this could introduce subtle bugs if the function was using some external state.
   > The better solution is to use the useCallback() Hook.

   Dependencies Array Best Practice with the useCallback() Hook Example:
      import React, { useState, useEffect, useCallback } from 'react';
      ...
      function App() {
         ...
         const fetchMoviesHandler = useCallback(async () => {...});
         useEffect(() => {
            fetchMoviesHandler()
         }, [fetchMoviesHandler]);
         render(...);
      };

   > Import the useCallback() Hook from the react library and then refactor the code slightly. Create "fetchMoviesHandler" as a const variable and set its value to the useCallback() Hook. Pass in an arrow callback function to the useCallback() Hook which is set to the asynchronous HTTP request code. Remember to list any dependencies the function might have within the dependencies array to the useCallback() Hook. 
   > In the above example the dependencies array would be an empty array because it has no external dependencies. The Fetch API is a global browser API and therefore is not a dependency. State updating functions do not need to be added as a dependencies because React guarantees that they will never change.
   > Add the 'async' keyword now at the front of the callback function in order for the asynchronous 'await' code to work again. This will notify JavaScript that the anonymous callback function contains asynchronous code.
   > The ordering is now important because the "fetchMoviesHandler" is a variable and must be executed first before it can be used in the useEffect() Hook. Otherwise, you would be executing a variable (which is a function definition) before it has been defined which will break your application.
   > This will ensure that the "fetchMoviesHandler" function is not re-created unnecessarily. The application will fetch the data for the first time the Component initialises without causing an infinite loop and you can click the Fetch Movies button to reload the data manually.

------------------------------------------------------------------------------------
7. Sending a POST Request:
------------------------------------------------------------------------------------
   > To send a POST request using the Fetch API you would use the fetch() method. This method not only fetches data but it can also perform other CRUD operations.
   > The second argument/parameter to the fetch() API takes in an options object. This allows you to configure the outgoing request.

   Fetch API POST Request Example:
      async function addMovieHandler(movie) {
         const response await fetch('https://react-http-6b4a6.firebase.io.com/movies.json', {
            method: 'POST',
            body: JSON.stringify(movies),
            header: {
               'Content-Type': 'application/jason'
            }
         });
         const data = await response.json();
         console.log(data);
      };

   > The method key by default is set the the 'GET' http method, which is why the second argument/parameter is not needed for a GET request.
   > The method key's value can be set to other HTTP methods like 'POST', 'DELETE' and 'PUT'.
   > In the above example, a post request would be made to the Firebase database endpoint. What actually happens when sending a POST request to some URL will depend on the backend you are using. A 'POST' request is not set in stone to always create a resource even though it typically would - this all depends on the concrete API.
   > To add the resource that should be stored, the body key option is used. The body wants a JSON data. To convert a JavaScript object into a JSON data format you can use a JavaScript utility method. JSON is built into the browser which you can call on and then call on the .stringify() method i.e. JSON.stringify() which will convert the JavaScript object into a JSON data format.
   > The .stringify() method takes in a JavaScript object or array as its argument/parameter which it will then convert that data into a JSON data format.
   > lastly, you need to add some headers using the headers key. This takes in an object as its value. The 'Content-Type': 'application/jason' describes the content that will be sent. Technically, Google's Firebase service does not require the header property because it would be able to handle the request even if the header is not set but it does not hurt to set it.
   > A lot of REST APIs to which you might be sending requests to might require this extra header which describes the content that would be sent along with the request.
   > The POST request is a asynchronous task and will return a promise; thus, you can use the async/await syntax and store the response in a variable.
   > Firebase returns data back in a JSON data format.
   > You could also add error handling by wrapping the function in a try/catch syntax as demonstrated in section 5. Handling HTTP Errors above.
   > When you now send the request, you should see the new data added to the backend database as well as see the new response data object within the browsers JavaScript console to confirm the new object was created. This is how you can send a POST request, but now you would need to re-configure your 'GET' request to match the data you actually receive from your backend API.

   Fetching Firebase Data Example:
      const fetchMoviesHandler = useCallback(async () => {
         const loadedMovies = [];
         for(const key in data) {
            loadedMovies.push({
               id: key,
               title: data[key].title,
               openingText: data[key].openingText,
               releaseDate: data[key].releaseDate
            });
         };
         setMovies(loadedMovies);
      };

   > In the above example, this demonstrates one such way of how you could fetch the movies data from your Firebase database API. This all depends on the object you receive from the API you are using.
   > This concludes the core elements when working with REST APIs and sending HTTP requests within your React applications. You should now know how to send a 'GET' request to fetch data and send a 'POST' request to store data to some backend database. Both methods are typical in many application and you should now know how to handle state and errors.