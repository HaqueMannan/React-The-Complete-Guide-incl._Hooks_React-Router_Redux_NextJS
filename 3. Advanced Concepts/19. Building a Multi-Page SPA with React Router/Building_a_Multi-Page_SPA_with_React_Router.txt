Building a Multi-Page SPA with React Router - Summary:
1. What is Routing & Installing React Router
2. Defining & Using Routes, Working with Links and Using NavLinks
3. Adding Dynamic Routes with Params and Extracting Route Params

------------------------------------------------------------------------------------
1. What is Routing & Installing React Router:
------------------------------------------------------------------------------------
   > When the path in the URL changes the URL loads different pages i.e. the visible content of the page also changes.
   > The combination of the different pages with their own paths that make up the overall website. This is how the web works and how the React application should work as well.

   Traditional Multi-Page Application:
      [/welcome]---------------URL Change--------------->[/products]
      [Welcome Page]-------Visible Content Change------->[Products Page]
      [welcome.html]---------Page Change = New---------->[products.html]
                           (Requests + Response)

   > When you have a traditional multi-page application where the server sends back different HTML files it will be typically be built with different HTML files on the server (or generating the files dynamically on the server) and then for the requests to the different URLs, different HTML pages are sent back to the client as the response. These pages are then rendered by the browser.
   > When you have different HTML pages you no longer have a single page application which means whenever you change the URL you leave the running client side application (losing all the state), wait for the request/response cycle and let the browser render the new page.
   > One of the reason switching to React is to move away from the traditional flow. Instead you want to load client side application (i.e. a JavaScript web app that runs in the browser) and utilise this application to change what is visible on the screen with JavaScript to provide an instant reactive user experience.
   > Fetching different HTML pages does not fit in with React Applications because it does not provide the reactive experience.

   Multi-Page Single Page Application:
                     [Single Page Application]
                              |
                              v
               [One initial HTML Request & Response]
                              |
                              v
      [URL changes handled by client side React Code]----->[Changes the visible content without fetching a new HTML file]

   > React allows you to build a Single Page Application (SPA) which allows you to have one initial HTML request & response. You can then look at the URL and manipulate the URL and path after the domain name with JavaScript.
   > You can use some client side React code to control the URL which would then change what is displayed on the screen when the URL changes without fetching a new HTML file providing a Multi-Page experience.
   > Therefore, you need some code that works on the URL (i.e. the path after the domain name) and then listens to clicks on the page to update that path into the URL. However, this does not actually send a request to the server for a new HTML file but instead blocks the browsers default behaviour and update what is visible on the screen with client side JavaScript i.e. React.
   > You need to write code that does all the above or you could use a Third-Party package that does it for you. There is a popular third-party package called "React Router" (https://reactrouter.com/) which you have to install separately. This package will provide this client-side routing feature to watch and manipulate the URL which the Component will render based on the URL.
   > To install React Router to your React project run the following command in the terminal while in the project directory.

   React Router Install Command:
      $: npm install react-router-dom

------------------------------------------------------------------------------------
2. Defining & Using Routes, Working with Links and Using NavLinks:
------------------------------------------------------------------------------------
   > Now that the 'react-router-dom' is installed to the React application you are now ready to start using routes.
   > Routing is basically like conditionally rendering a Component and may recall it being similar to using state to conditionally show a certain Component.

   "domain-name.com/"            => Renders Component A
   "domain-name.com/products"    => Renders Component B

   > You could write your own code to conditionally render Component based on the URL i.e. set your own states, listening to clicks on links and prevent the browser's default behaviour of sending a request, change some state to conditionally render something onto the screen, etc. The third-party 'react-router-dom' package does this all for us (i.e. we do not need to write our own code) and makes working with routes very easy.

   Using React-Router-Dom Example:
      src/pages/Welcome.js:
         import React from 'react';
         const Welcome = () => { return <h1>The Welcome Page</h1> };
         export default Welcome;
      src/pages/Products.js:
         import React from 'react';
         const Products = () => { return <h1>The Products Page</h1> };
         export default Products;
      src/App.js:
         import React from 'react';
         import { Route } from 'react-router-dom';
         import Welcome from './pages/Welcome';
         import Products from './pages/Products';
         const App = () => {
            return (
               <div>
                  <Route path="/welcome">
                     <Welcome />
                  </Route>
                  <Route path="/products">
                     <Products />
                  </Route>
               </div>
            );
         };
         export default App;
      src/index.js:
         import React from 'react';
         import ReactDOM from 'react-dom';
         import { BrowserRouter } from 'react-router-dom';
         import App from './App';
         ReactDOM.render(
            <React.StrictMode>
               <BrowserRouter>
                  <App />
               </BrowserRouter>
            </React.StrictMode>, 
            document.getElementById('root')
         );

   > First import the 'Route' Component from the 'react-router-dom' package. This Component allows you to define a certain path and then the React Component that should be loaded when that path becomes active in the URL.
   > The Route Component wants a special prop called 'path' which should be the path in the URL that comes after the domain-name. In-between the Route tags you would place the Component(s) that should be rendered for that route. In the above example the Welcome Component is rendered for the "domain-name.com/welcome" route path while the Products Component is rendered for the "domain-name.com/products".
   > The Route Component will ensure that only the Component between the tags are rendered when the URL route path is active otherwise the Component will not be displayed.
   > This is how you would register routes with 'react-router-dom' so that it can evaluate the URL and render the relevant Component(s) to the browser's screen.
   > To activate the 'react-router-dom' and all its features (e.g. the Routes Component feature) you need to go to the 'src/index.js' file of your React application and import 'BrowserRouter' Component from the 'react-router-dom' package. This component needs to wrap the overall <App/> i.e. the root Component for the whole React application.
   > This will active React Router and unlock the React Router features like defining the routes/paths using the Route Component.
   > Whenever you navigate to any other URL path other than those defined within the Route Component(s) will now render/display nothing to the screen. This in a nutshell how routing works. There are more features to routing and more concepts to be explored; however, the above is the core concept behind routing and creating a Multi-Page SPA application in React.
   > One thing to note, since we now use Components as different pages in the application (and not like other Components we have worked with before) it is quite common to store them in a folder named "pages" or "screens". You do not need to name the "pages" and can stick to having a folder called "components".
   > Having a separate "pages" folder with the Component that are loaded by the router makes it clearer what kind of Components these are and that you use these Component in conjunction with the Router.
   > You can have other Components within the application that are not loaded by the Router but which you instead use in other Component's JSX code and these can be kept in the "components" folder as we have done in the past. This will help make it clearer to distinguish between the different types of Component files you have within your application.
   > Now that you have routing implemented within the React application, there is one issue. There is no way to navigate the different route paths other than changing the URL manually. Whilst you might sometimes do that but it is often common to have links on the page which you can click to take you somewhere else.

   Working with Links (Flawed Approach) Example:
      src/components/MainHeader.js:
         import React from 'react';
         const MainHeader = () => {
            return(
               <header>
                  <nav>
                     <ul>
                        <li><a href="/welcome">Welcome</a></li>
                        <li><a href="/products">Products</a></li>
                     </ul>
                  </nav>
               </header>
            );
         };
         export default MainHeader;
      src/App.js:
         import React from 'react';
         import { Route } from 'react-router-dom';
         import MainHeader from './components/MainHeader';
         import Welcome from './pages/Welcome';
         import Products from './pages/Products';
         const App = () => {
            return (
               <div>
                  <MainHeader />
                  <main>
                     <Route path="/welcome"><Welcome /></Route>
                     <Route path="/products"><Products /></Route>
                  </main>
               </div>
            );
         };

   > The above is one way in which you can create a navigation link to your application and whenever you click the link it will update the URL and allow you to navigate the different routes without having to write the URL manually in the browser. However, there is a big flaw with the above approach.
   > This actually loads a new page sending a new request using the browsers default behaviour with links. This will cause a brand new HTML file being loaded each time you click a link (and can be seen in the browsers developer tools network tab). While this works for navigation it also means that you leave the single-page application and start a new one whenever you click on one of the navigation links.
   > Any application state will be lost whenever the page refreshes which is not ideal. This goes against building a single page application which will cause a sub-optimal user experience.
   > It would be better if the default browser 's sending a request for a new HTML page would be prevented. You could write your own code for this by adding click event listeners on the <a> link tags and prevent the default and manually get the react router to load the correct Component. However, you do not need to do this manually.

   Working with Link (React Router Approach) Example:
      src/components/MainHeader.js:
         import React from 'react';
         import { Link } from 'react-router-dom';
         import classes from './MainHeader.module.css';
         const MainHeader = () => {
            return(
               <header className={classes.header}>
                  <nav>
                     <ul>
                        <li><Link to="/welcome">Welcome</Link></li>
                        <li><Link to="/products">Products</Link></li>
                     </ul>
                  </nav>
               </header>
            );
         };

   > There is another Component you can import from the 'react-router-dom' called 'Link'. The 'Link' Component does what it's name implies i.e. it allows you to create a link. You can replace the <a> tag with the <Link /> Component and replace the "href" attribute with the "to" prop. The Link Component expects a "to" prop which should hold the link path to navigate to when the link is clicked.
   > Visually you will receive the same output as before; however, you will notice that the page no longer reloads or sends a new request for a new HTML page.
   > The Links Component are still <a> tags at the end of the day but React Router will actually listen to clicks on the Link Component, prevent the browser default, manually update the URL for you so that it looks like you are switching pages and finally change what is displayed on the screen creating this fake navigation which is what you want for your Multi-Page SPA.
   > You no longer lose any state while giving the user an illusion of switching between different pages. This is how you want to use routing in your React application.
   > Another problem we now have is that when it comes to navigation we often want to highlight the active links within the navigation.

   Using React Router's NavLink Example:
      src/components/MainHeader.module.css:
         ...
         .header a:hover,
         .header a:active,
         .header a.active {
            color: #95bcf0;
            padding-bottom: 0.25rem;
            border-bottom: 4px solid #95bcf0;
         }
      src/components/MainHeader.js:
         import React from 'react';
         import { NavLink } from 'react-router-dom';
         import classes from './MainHeader.module.css';
         const MainHeader = () => {
            return(
               <header className={classes.header}>
                  <nav>
                     <ul>
                        <li><NavLink activeClassName={classes.active} to="/welcome">Welcome</NavLink></li>
                        <li><NavLink activeClassName={classes.active} to="/products">Products</NavLink></li>
                     </ul>
                  </nav>
               </header>
            );
         };

   > React Router provides another feature. Instead of using the regular 'Link' Component you can import and use the 'NavLink' Component instead.
   > The 'NavLink' Component works exactly like the 'Link' Component but it also does more. The NavLink Component will set a CSS class on the active anchor (<a> tag) item. You need to use the 'activeClassName' prop to tell the 'NavLink' which class it should add on the active link.
   > In the above example the module.css file contains a style for the ".header a.active" i.e. this style targets anchor elements that have the class name of "active". The 'NavLink' will conditionally add the "active" class using the 'activeClassName' prop whenever the 'NavLink' is active which will trigger the "active" link styling.
   > This is a nice additional feature you would want to have with a lot of application you would build. This is made simple using the NavLink feature provided by React Router (i.e. without having to write your own code).

------------------------------------------------------------------------------------
3. Adding Dynamic Routes with Params and Extracting Route Params:
------------------------------------------------------------------------------------
   > You may want a route path that is activated by a link but that page is rendered using details based on the link you clicked from. For example, you could have a products page with links to different products. Those links would take you to the product details page which will provide the detail of the product that was clicked (whether that detail data comes from aback-end API from a database or application from an application-wide state frp, React Context API or Redux).
   > In this example you would definitely want one and the same Component but you need a way to tell React Router for which specific product the product details Component should be loaded so that inside of this Component you can kind of retrieve that extra product data.

   Dynamic Routes with Params Example:
      src/pages/ProductDetails.js:
         import React from 'react';
         const ProductsDetails = () => {
            return(
               <section><h1>Product Detail</h1></section>
            );
         };
         export default ProductsDetails;
      src/pages/Products.js:
         import React from 'react';
         const Products = () => {
            return(
               <section>
                  <h1>The Products Page</h1>
                  <ul>
                     <li>A Book</li>
                     <li>A Pen</li>
                     <li>A Ruler</li>
                  </ul>
               </section>
            );
         };
         export default Products;
      src/App.js:
         import React from 'react';
         import { Route } from 'react-router-dom';
         ...
         import ProductsDetails from './pages/ProductDetail';
         const App = () => {
            return (
               <div>
                  <MainHeader />
                  <main>
                     ...
                     <Route path="/product-detail/:productId"><ProductDetail /></Route>
                  </main>
               </div>
            );
         };

   > You can define dynamic routes in the path prop using a special syntax of using the colon followed by any identifier of your choice e.g. "domain-name.com/product-detail/:productId".
   > The ":productId" is a dynamic path segment which tells React Router that the overall path for which the page should be loaded will be something like "domain-name.com/product-detail/<any value>" where the "<any value>" is a placeholder that can have any value e.g. "domain-name.com/product-detail/a-book".
   > Inside of the ProductsDetails Component which gets rendered (as long as the URL is valid) when the path is reached you will get access to the concrete value for the dynamic segment. You now need a way to access that value stored in the dynamic segment so that you can use it inside of the rendered Component.

   Extracting Route Params Example:
      src/pages/ProductDetails.js:
         import React from 'react';
         import { useParams } from 'react-router-dom';
         const ProductsDetails = () => {
            const params = useParams();
            return(
               <section>
                  <h1>Product Detail</h1>
                  <p>{params.productId}</p>
               </section>
            );
         };
         export default ProductsDetails;

   > Import the 'useParams' Custom Hook from the 'react-router-dom' package. When you call on the useParams Hook this will return a params object which you can store in a const variable.
   > This object will have key:value pairs where the keys are the name of the dynamic segments leading to that page and the value is extracted segment value from the URL.
   > Using the params object you can now access and extract the entered parameters from URL and use it within the Component JSX.
   > You could have more than one dynamic segment for a route e.g. "domain-name.com/product-detail/:productId/:anotherId". If the URL in the browser was "domain-name.com/product-detail/1/2" then the useParams Hook would extract the params object as { productId: 1, anotherId: 2 } from the URL which you can then use inside of the Component file to do something like fetching data from a database using a backend API.