JavaScript Refresher - Summary:
1. Variables (Let and Const)
2. Arrow Functions
3. Exports & Imports
4. Classes, Properties and Methods
5. Spread and Rest Operators
6. Destructuring
7. Reference and Primitive Types

------------------------------------------------------------------------------------
1. JavaScript Variables:
------------------------------------------------------------------------------------
   > ES6 introduces let and const keywords to fix the scope of variables behind the scenes.
   > Highly encouraged to use these variable keywords instead of the original var keyword.
   var = original variable declaration keyword in JavaScript and can be either variable or constant scope values.
   let = used for variable values (assign but can change throughout its life).
   const = used for constant values (assign once and never change).

   ES5 JavaScript Syntax Example:
      var name = 'Max';
      name = 'John';
      var age;
      age = 28;
      age = 29;

   > Note: that for both ES5 and ES6 JavaScript you do not need to assign a value after the variable has been declared.

   ES6 JavaScript Syntax Example:
      const name = 'Max';
      let age = 28;
      age = 29;

   > A const variable will throw a Type Error if you try to mutate the value of the variable e.g.
      const name = 'Max';
      name = 'John';

------------------------------------------------------------------------------------
2. ES6 Arrow Functions:
------------------------------------------------------------------------------------
   > ES6 introduces a new way of writing JavaScript functions.
   > It resolves the issue with the "this" keyword context within the ES5 JavaScript syntax.

   ES5 JavaScript Syntax Example:
      var myFunc = function() {
         ...
      };

      function myFunc() {
         ...
      };

   ES6 JavaScript Syntax Example:
      const myFunc() = () => {
         ...
      };

   > The this keyword will always keeps it's context within the arrow function and will not change on runtime as it previously did with the ES5 syntax.
   > The arrow function must be stored in a const or let variable (it could also be in a var but highly not recommended).
   > You can omit the round bracket if there is inly one parameter/argument for the function.
   > You can omit the curly brackets and write as one single line if the function body only returns something and has not other code.

   For example:
      const multiply = (number) => {
         return number * 2;
      };

      const multiply = number => number * 2;

   > Note that you must omit the return keyword if you use dcide to use this shorthand approach without the curly brackets.

------------------------------------------------------------------------------------
3. Modules (Exports and Imports):
------------------------------------------------------------------------------------
   > JavaScript code can be split into multiple files to create modular code. These are known as modules.
   > To export a module so that another module code can import its content and make reference to it, the  export keyword is used.

   ES6 JavaScript Syntax Example:
      person.js:
         const person = {
            name: 'Max;
         };
         export default person;

      utility.js:
         export const clean = () => { ... };
         export const baseData = 10;

   > Note that the 'default' keyword is a special keyword in JavaScript which marks the person variable as the default export of the module/file.
   > A file can export multiple things such as variables, functions, objects, etc. as seen with the second example of utility.js.
   > To import a module into another module, the import keyword is used.

   ES6 JavaScript Syntax Example:
      app.js:
         import person from './person.js';
         import prs from './person.js';

         import { baseData } from './utility.js';
         import { clean } from './utility.js';
         import { clean as cln } from './utility.js';
         import { baseData, clean } from './utility.js';
         import * as bundle from './utility.js';

   > The above example demonstrates the different import syntaxes than can be used.
   > In the first example it does not matter whether we called the import 'person' or 'prs' because the import module would know exactly what to use from the person.js export module because it used the default keyword.
   > In the second example of importing from utility.js requires the curly brackets. This is because the importing module must know specifically what specific things to target that have been exported by the export file sine there is no default exports. This is known as named exports because you import things by their name. The name must be exactly the same as defined by the export module.
   > You can use alias by using the 'as' keyword.
   > You can use comma's to separate the different named exports as seen in the second last example which imports both the 'baseData' and 'clean' exports on a single line syntax.
   > You can import everything from an export module by using the asterisk * key character as seen in the last example.
   > If you decide to give the * an alias (not required but optional), i order to access the property you would use the dot notation e.g. bundle.baseData to access the baseData variable from the export module.

IMPORTANT NOTE: Not all web browsers support the latest versions of ES6 and beyond features; however, you can use compilers (such as Webpack and Babel) which can convert ES6+ syntax into regular ES5 syntax which are supported by all browsers JavaScript engines.

------------------------------------------------------------------------------------
4. Classes (Properties and Methods):
------------------------------------------------------------------------------------
   > Classes are like blueprints for JavaScript objects.
   > A class is created with the "class" keyword.
   > A class can have properties (variables) and methods (functions).

   ES6 JavaScript Syntax Example:
      class Person {
         name = 'Max'
         call = () => { ... };
      };

      const myPerson = new Person();
      myPerson.call();
      console.log(myPerson.name);

   > A class is instantiated using the "new" keyword
   > You create JavaScript objects with classes as the blueprints.
   > Classes support inheritance which means that you have another class which you can inherit from taking across all its properties and method, while potentially adding new properties and methods.
   > To inherit from another class you would use the "extends" keyword.

   ES6 JavaScript Syntax Example:
      class Human {
         constructor() {
            this.gender = 'male';
         };
         printGender() {
            console.log(this.gender);
         };
      };

      class Person extends Human {
         constructor() {
            super();
            this.name = 'Max';
         };
         printMyName() {
            console.log(this.name);
         };
      };

      const Person = new Person();
      person.printMyName();
      person.printGender();

   > Properties are added using the constructor() method which gets called automatically when a Class is instantiated.
   > A method is created by defining the name followed by round brackets which holds method's arguments/parameters and then followed by the code body/block within curly brackets.
   > The Person class inherits from the Human class i.e. it inherits all of its properties and methods.
   > If extending from another class and are using a constructor within the class, the super() method is required within the constructor method.
   > The super() keyword executes the parent constructor which would correctly initialise the class. Without this you would run into a Reference Error.
   > Classes are used by React to create one of the two ways of it's components.
   > Classes are very comparable to constructor functions while inheritance are comparable to prototypes.
   > ES7 introduces another syntax of initialising properties and methods in JavaScript.
   > No longer are you required to use the constructor function to define properties. Furthermore, you can now use arrow functions for methods without the issue of the "this" keyword's scope.

   ES7 JavaScript Syntax Example:
      Class ClassObject {
         myProperty = 'value';
         myMethod = () => { ... };
      };

   > You no longer require to call the super() method when inheriting from a class which uses a constructor() method. As seen with the refactored example below:
      ES7 JavaScript Syntax Example:
         class Human {
            this.gender = 'male';
            printGender = () => {
               console.log(this.gender);
            };
         };

         class Person extends Human {
            this.name = 'Max';
            printMyName = () => {
               console.log(this.name);
            };
         };

------------------------------------------------------------------------------------
5. Spread & Rest Operator:
------------------------------------------------------------------------------------
   > The Spread and Rest Operator uses three periods (...). Which one is called depends on how you use it.
   > The spread operator is used to split up Array Elements or Object Properties

      ES6 JavaScript Syntax Example:
         const newArray = [...oldArray, 1, 2];
         const newObject = { ...oldObject, newProp: 5 };

   > The three periods before the array or object will pull out the array elements/object properties and add it to the new array/object.
   > Note that if the oldObject had a property of newProp, this would be replaced by the new object's newProp property value because the new object takes precedence.
   > The rest operator which also uses the three periods is used within functions. The rest operator is used to merge a list of function arguments/parameters into an array.

      ES6 JavaScript Syntax Example:
         function sortArgs(...args) {
            return args.sort();
         };

------------------------------------------------------------------------------------
6. Destructuring:
------------------------------------------------------------------------------------
   > Destructuring allows you to easily extract array elements or object properties and store them in variables.
   > The spread operator takes out all elements/properties and distributes them in a new array/object. Destructuring on the other hand allows you to pull out single elements/properties from array/objects and store them in variables.

      ES6 JavaScript Syntax Example:
         [a, b] = ['Hello', 'Max'];
         console.log(a);      // Hello
         console.log(b);      // Max

         { name } = { name: 'Max', age: 28 };
         console.log(name);   // Max
         console.log(age);    // undefined

   > Destructuring an array elements uses the square bracket syntax while destructuring an object uses the curly bracket syntax.
   > In an array destructuring the order defines which properties are extracted/destructed.
   > In an object destructuring the property name defines which properties are extracted/destructed. This is why the age variable would return undefined as no values was destructed from the object's age property.